[{"/Users/chrisfraser/projects/react_RPG/react_rpg/src/index.js":"1","/Users/chrisfraser/projects/react_RPG/react_rpg/src/reportWebVitals.js":"2","/Users/chrisfraser/projects/react_RPG/react_rpg/src/App.js":"3","/Users/chrisfraser/projects/react_RPG/react_rpg/src/screens/GameScreen.js":"4","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameActionBar.js":"5","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameBoard.js":"6","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameSquare.js":"7","/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/boardImages.js":"8","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/MovementPhase.js":"9","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Character.js":"10","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Enemy.js":"11","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleePlayer.js":"12","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/meleeWeapon.js":"13","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleeWeapon.js":"14","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/AttackPhase.js":"15","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/CharacterTurnSelect.js":"16","/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/WeaponImages.js":"17","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Spell.js":"18","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/HealerPlayer.js":"19","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MagicPlayer.js":"20","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/EquipModal.js":"21","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Heal.js":"22"},{"size":500,"mtime":1608752934000,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1608752934002,"results":"25","hashOfConfig":"24"},{"size":230,"mtime":1608770853174,"results":"26","hashOfConfig":"24"},{"size":9403,"mtime":1612824650686,"results":"27","hashOfConfig":"24"},{"size":3877,"mtime":1612820758900,"results":"28","hashOfConfig":"24"},{"size":1591,"mtime":1612482267681,"results":"29","hashOfConfig":"24"},{"size":8177,"mtime":1612823769809,"results":"30","hashOfConfig":"24"},{"size":128,"mtime":1586701404653,"results":"31","hashOfConfig":"24"},{"size":1436,"mtime":1611419845025,"results":"32","hashOfConfig":"24"},{"size":5132,"mtime":1612485099025,"results":"33","hashOfConfig":"24"},{"size":12439,"mtime":1612827221102,"results":"34","hashOfConfig":"24"},{"size":2361,"mtime":1612485001903,"results":"35","hashOfConfig":"24"},{"size":154,"mtime":1610323315030,"results":"36","hashOfConfig":"24"},{"size":1046,"mtime":1612485191997,"results":"37","hashOfConfig":"24"},{"size":5614,"mtime":1612378726965,"results":"38","hashOfConfig":"24"},{"size":1606,"mtime":1612822003127,"results":"39","hashOfConfig":"24"},{"size":166,"mtime":1611517570117,"results":"40","hashOfConfig":"24"},{"size":277,"mtime":1612483278790,"results":"41","hashOfConfig":"24"},{"size":1093,"mtime":1612485617588,"results":"42","hashOfConfig":"24"},{"size":2602,"mtime":1612485324635,"results":"43","hashOfConfig":"24"},{"size":4360,"mtime":1612483278790,"results":"44","hashOfConfig":"24"},{"size":209,"mtime":1612483278790,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"13roori",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/Users/chrisfraser/projects/react_RPG/react_rpg/src/index.js",[],["100","101"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/reportWebVitals.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/App.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/screens/GameScreen.js",["102","103"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameActionBar.js",["104","105"],"import React, { useState, useEffect, useRef } from 'react';\nimport './GameActionBar.css'\nimport CharacterTurnSelect from './CharacterTurnSelect.js'\nimport MovementPhase from './MovementPhase.js'\nimport AttackPhase from './AttackPhase.js'\n\n\nconst GameActionBar = ( { \n    selectedCharacter,\n    setSelectedCharacter, \n    currentPhase, \n    setCurrentPhase, \n    calculateMovementLocations, \n    calculateAttackLocations,\n    setMovableSquares, \n    setAttackableSquares,\n    playerCharacters, \n    setPlayerCharacters,\n    // enemyMovementPhase,\n    setEnemyMovementPhase,\n    usedCharacters,\n    setUsedCharacters} ) =>{\n\n    // testing\n    const testBox = useRef()\n    const test = () => {\n        const element = document.getElementById(\"testBox\")\n        element.classList.toggle(\"transform\")\n        // element.classList.add(\"transform\")\n        \n        testBox.current.classList.toggle(\"transform\")\n        testBox.current.classList.toggle(\"right\")\n        console.log(testBox)\n        // Both of the above do the same thing BUT using REF is the correct react way of doing it\n    }\n    // end of testing\n\n    const startingPosition = useRef(null)\n    // this didnt need to be useRef, also work with state\n    // const [ startingPosition, setStartingPosition ] = useState(null)\n\n    useEffect(() =>{\n        if(selectedCharacter) startingPosition.current = playerCharacters[selectedCharacter][\"position\"]\n    }, [selectedCharacter])\n\n    return (\n        <div>\n            <p>GameActionBar</p>\n            {currentPhase === \"characterTurnSelect\" && <CharacterTurnSelect\n                playerCharacters={playerCharacters} \n                setSelectedCharacter={setSelectedCharacter}\n                usedCharacters={usedCharacters}\n                setUsedCharacters={setUsedCharacters}\n                setCurrentPhase={setCurrentPhase}\n                calculateMovementLocations={calculateMovementLocations}\n            />}\n            {currentPhase === \"playerMovement\" && <MovementPhase \n                selectedCharacter={selectedCharacter}\n                setSelectedCharacter={setSelectedCharacter}\n                setCurrentPhase={setCurrentPhase}\n                calculateMovementLocations={calculateMovementLocations}\n                setMovableSquares={setMovableSquares}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                setEnemyMovementPhase={setEnemyMovementPhase}\n                calculateAttackLocations={calculateAttackLocations}\n                startingPosition={startingPosition}\n            />}\n            {currentPhase === \"enemyMovement\" && \n                <div>\n                    <h1>Enemy Movement Phase</h1>\n                    <p>Please Wait...</p>\n                </div>\n            }\n            {currentPhase === \"playerAttack\" && <AttackPhase \n                selectedCharacter={selectedCharacter}\n                setSelectedCharacter={setSelectedCharacter}\n                setCurrentPhase={setCurrentPhase}\n                calculateAttackLocations={calculateAttackLocations}\n                calculateMovementLocations={calculateMovementLocations}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                setAttackableSquares={setAttackableSquares}\n                startingPosition={startingPosition}\n                usedCharacters={usedCharacters}\n                setUsedCharacters={setUsedCharacters}\n            />}\n\n            {/* testing  */}\n            <div id=\"testBox\" className=\"box transform\" onClick={() => test()}></div>\n            <div className=\"box\" ref={testBox} onClick={() => test()}></div>\n            <input type=\"button\" id=\"button\" value=\"Click Me\" onClick={() => test()}></input>\n            {/* end of testing  */}\n\n        </div>\n    )\n}\n\n\nexport default GameActionBar","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameBoard.js",["106"],"import React, { useState } from 'react';\nimport './GameBoard.css'\n\nimport GameSquare from './GameSquare.js'\n\nconst GameBoard = ({ \n    selectedCharacter,\n    setSelectedCharacter,\n    currentPhase, \n    setCurrentPhase,\n    movableSquares,\n    attackableSquares,\n    playerCharacters,\n    setPlayerCharacters,\n    enemyCharacters,\n    handleImageClick,\n    usedCharacters,\n    setUsedCharacters,\n    setAttackableSquares }) => {\n\n\n    const fillGameBoard = () => {\n\n        const gameSquares = []\n        for ( let i = 1; i < 26; i++ ) {\n            gameSquares.push(<GameSquare \n                key={i} \n                squareNumber={i} \n                currentPhase={currentPhase}\n                setCurrentPhase={setCurrentPhase}\n                selectedCharacter={selectedCharacter}\n                setSelectedCharacter={setSelectedCharacter}\n                movableSquares={movableSquares}\n                attackableSquares={attackableSquares}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                enemyCharacters={enemyCharacters}\n                handleImageClick={handleImageClick}\n                usedCharacters={usedCharacters}\n                setUsedCharacters={setUsedCharacters}\n                setAttackableSquares={setAttackableSquares}\n            />)\n        }   \n        return gameSquares  \n    }\n\n    return (\n        <div>\n            <p>GameBoard</p>\n            <div className=\"board-container\">\n                {fillGameBoard()}\n            </div>\n        </div>\n    )\n}\n\nexport default GameBoard","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameSquare.js",["107","108","109","110","111"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/boardImages.js",[],["112","113"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/MovementPhase.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Character.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Enemy.js",["114","115","116"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleePlayer.js",["117","118"],"import Character from './Character.js'\n\nfunction MeleePlayer(name, attackPoints, healthPoints, position, type) {\n    Character.call(this, name, attackPoints, healthPoints, position)\n    this.type = type\n    this.equippedWeapon  = null\n    this.weapons = []\n    this.ultimateCharge = 0\n\n    // this.statusEffects = []\n}\n\nMeleePlayer.prototype = Object.create(Character.prototype);\nObject.defineProperty(MeleePlayer.prototype, 'constructor', { \n    value: MeleePlayer, \n    enumerable: false, // so that it does not appear in 'for in' loop\n    writable: true \n});\n\nMeleePlayer.prototype.attack = function (enemy){\n    let damageDone = this.attackPoints\n    const startingHealth = enemy.healthPoints;\n\n    if(this.equippedWeapon) {\n        damageDone += this.equippedWeapon.attackPower\n        const randomNumber = Math.floor(Math.random() * 100) + 1\n        switch(this.equippedWeapon.type){\n            case(\"sword\"):\n                if(randomNumber <= 25) damageDone *= 2\n                break\n            case(\"axe\"):\n                if(randomNumber <= 10) damageDone = startingHealth\n                // else if(randomNumber <= 100) addEffectToTarget(\"attack down\", enemy, 2) // should be <= 20\n                else if(randomNumber <= 100) Character.prototype.addEffectToTarget.call(this, this.equippedWeapon, enemy) // should be <= 20\n                break\n            case(\"club\"):\n                // if(randomNumber <= 100) addEffectToTarget(\"stun\", enemy, 1) // should be <= 25\n                if(randomNumber <= 100) Character.prototype.addEffectToTarget.call(this, this.equippedWeapon, enemy) // should be <= 25\n                break\n        }\n    }\n    enemy.statusEffects.forEach(statusEffect => {\n        if(statusEffect.effect === \"armour down\" ) damageDone *= 2\n    })\n    enemy.healthPoints = startingHealth - damageDone\n}\n\nconst addEffectToTarget = (effectName, enemy, duration) => {\n    let stillToAdd = true\n    const updatedEffects = enemy.statusEffects.map(statusEffect =>{\n        if( effectName === statusEffect.effect){\n            if(duration > statusEffect.duration) statusEffect.duration = duration\n            stillToAdd = false\n        }\n        return statusEffect\n    })\n    if (stillToAdd) enemy.statusEffects.push({effect: effectName, duration: duration})\n    else enemy.statusEffects = updatedEffects\n}\n\nexport default MeleePlayer","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/meleeWeapon.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleeWeapon.js",["119"],"function MeleeWeapon(name, attackPower, type, effectName, activationChance){\n    this.name = name\n    this.attackPower = attackPower\n    this.type = type\n\n    let defaultEffect = null\n    let defaultActivationChance = null\n    let defaultDuration = null\n    switch (this.type) {\n        case \"axe\":\n            const randomNumber = Math.floor(Math.random() * 4)\n            randomNumber === 0 ? defaultEffect = \"instant kill\" : defaultEffect = \"attack down\"\n            defaultActivationChance = 20\n            defaultDuration = 10\n            break\n        case \"club\":\n            defaultEffect = \"stun\"\n            defaultActivationChance = 25\n            defaultDuration = 1\n            break\n        case \"sword\":\n            defaultEffect = \"pierce\"\n            defaultActivationChance = 25\n            defaultDuration = 0\n            break\n    }\n    \n    this.effectName = effectName || defaultEffect\n    this.activationChance = activationChance || defaultActivationChance\n    this.duration = defaultDuration\n\n}\n\nexport default MeleeWeapon","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/AttackPhase.js",["120","121","122","123","124","125","126"],"import React, { useState } from 'react';\nimport './AttackPhase.css'\nimport EquipModal from './EquipModal.js'\nimport ReactDOM from 'react-dom'\nimport Modal from 'react-modal'\n// import swordImage from '../assets/sword.png'\n// import WeaponImages from '../assets/WeaponImages.js'\n\nconst AttackPhase = ({ \n    selectedCharacter,\n    setSelectedCharacter, \n    setCurrentPhase, \n    calculateAttackLocations, \n    calculateMovementLocations,\n    setAttackableSquares,\n    playerCharacters, \n    setPlayerCharacters,\n    setEnemyMovementPhase,\n    startingPosition,\n    usedCharacters,\n    setUsedCharacters }) =>{\n\n    const [ weaponChangeModalIsOpen, setWeaponChangeModalIsOpen ] = useState(false)\n    const [ equipModalIsOpen, setEquipModalIsOpen ] = useState(false)\n\n    const [ equippedWeapon, setEquippedWeapon ] = useState(playerCharacters[selectedCharacter].equippedWeapon)\n\n    const handleFinishedCharacterAttack = () => {\n        setAttackableSquares([])\n        setCurrentPhase(\"characterTurnSelect\")\n        const updatedUsedCharacters = [...usedCharacters, selectedCharacter]\n        setUsedCharacters(updatedUsedCharacters)\n    }\n\n    const handleCancel = () => {\n        setCurrentPhase(\"playerMovement\")\n        calculateMovementLocations(startingPosition.current, 2)\n        setAttackableSquares([])\n    }\n\n    const handleChangeEquipped = () => {\n        // setWeaponChangeModalIsOpen(true)\n        setEquipModalIsOpen(true)\n    }\n\n\n    const displayWeaponInventory = () => {\n        const weapons = playerCharacters[selectedCharacter].weapons\n        const displayWeaponOptions = weapons.map(weapon => {\n            let equippedStyle = false\n            if(playerCharacters[selectedCharacter].equippedWeapon && playerCharacters[selectedCharacter].equippedWeapon.name === weapon.name) equippedStyle = true\n            return (\n                <div className={equippedStyle ? \"weapon-select-modal-weapon equippedStyle\" : \"weapon-select-modal-weapon\"} onClick={() => handleEquipWeapon(weapon)}>\n                    {/* <img src={swordImage} alt='sword' className=\"weapon-select-modal-image\"></img>  */}\n                    {/* <img src={WeaponImages[weapon.name].default} alt='sword' className=\"weapon-select-modal-image\"></img>  */}\n                    <p>{weapon.name}</p>\n                    <img src={require('../assets/' + weapon.name + '.png').default} alt={weapon.name} className=\"weapon-select-modal-image\"></img> \n                    <p>Damage: {weapon.attackPower}</p>\n                    {/* <button onClick={() => handleEquipWeapon(weapon)}>Equip</button> */}\n                </div>\n            )\n        })\n        return displayWeaponOptions\n    }\n\n    const handleEquipWeapon = (weapon) => {\n        const updateableCharacter = playerCharacters[selectedCharacter]\n        updateableCharacter.equippedWeapon = weapon\n        setPlayerCharacters(prevState => ({...prevState, [selectedCharacter]: updateableCharacter }))\n    }\n\n    return (\n        <div>\n            <p>Attack Phase</p>\n                <div>\n                    <p>Currently Attacking with {playerCharacters[selectedCharacter].type}</p> \n                    <button onClick={() => handleFinishedCharacterAttack()}>End {playerCharacters[selectedCharacter].type}'s turn without attacking </button>\n                    {selectedCharacter === \"meleePlayer\" && <button onClick={() => handleChangeEquipped()}>Change Equipped Weapon</button>}\n                    {selectedCharacter === \"magicPlayer\" && <button onClick={() => handleChangeEquipped()}>Change Equipped Spell</button>}\n                    {selectedCharacter === \"healerPlayer\" && <button onClick={() => handleChangeEquipped()}>Change Equipped Heal</button>}\n                    <button onClick={() => handleCancel()}>Back</button>\n                    <p>After finishing movement for this character it cannot be moved again until next movement phase, canceling doesn't use characters movement for this turn</p>\n                </div>\n            {console.log(\"equipmentType111111\", selectedCharacter)}\n\n                {selectedCharacter && <EquipModal \n                    equipModalIsOpen={equipModalIsOpen} \n                    setEquipModalIsOpen={setEquipModalIsOpen}\n                    playerCharacters={playerCharacters}\n                    setPlayerCharacters={setPlayerCharacters}\n                    selectedCharacter={selectedCharacter}\n                />}\n\n\n\n                {/* {selectedCharacter === \"meleePlayer\" && <Modal\n                className=\"weapon-select-modal-container\"\n                appElement={document.getElementById('root')}\n                isOpen={weaponChangeModalIsOpen}\n                style={{\n                    overlay: {\n                        backgroundColor: 'rgba(0,0,0,0.7)'\n                    }\n                }}\n                >\n                <p>Change Weapon</p>\n                {playerCharacters[selectedCharacter].equippedWeapon ? \n                    <p>Currently Equipped weapon {playerCharacters[selectedCharacter].equippedWeapon.name}</p>\n                :\n                    <p>No Weapon Currently Equipped</p>\n                }\n                <div className=\"weapon-select-modal-weapons-container\">\n                    {displayWeaponInventory()}\n                </div>\n                <button className=\"weapon-select-modal-button\" onClick={() => handleEquipWeapon(null)}>Unequip Weapon</button>\n                <button className=\"weapon-select-modal-button\" onClick={() => setWeaponChangeModalIsOpen(false)}>Confirm</button>\n            </Modal>} */}\n        </div>\n    )\n\n}\n\nexport default AttackPhase","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/CharacterTurnSelect.js",["127"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/WeaponImages.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Spell.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/HealerPlayer.js",["128"],"import CharacterTurnSelect from '../components/CharacterTurnSelect.js'\nimport Character from './Character.js'\n\nfunction HealerPlayer(name, attackPoints, healthPoints, position, type) {\n    Character.call(this, name, attackPoints, healthPoints, position)\n    this.type = type\n    this.equippedHeal  = null\n    this.heals = []\n    this.ultimateCharge = 0\n\n    // this.statusEffects = []\n}\n\nHealerPlayer.prototype = Object.create(Character.prototype);\nObject.defineProperty(HealerPlayer.prototype, 'constructor', { \n    value: HealerPlayer, \n    enumerable: false, // so that it does not appear in 'for in' loop\n    writable: true \n});\n\nHealerPlayer.prototype.attack = function (target){\n    if ( this.equippedHeal !== null ) {\n        const startingHealth = target.healthPoints\n        const newHealth = startingHealth + this.equippedHeal.healPower\n        target.healthPoints = newHealth\n        if ( this.equippedHeal.effectName) Character.prototype.addEffectToTarget.call(this, this.equippedHeal, target)\n    } else Character.prototype.attack.call(this, target)\n}\n\nexport default HealerPlayer","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MagicPlayer.js",["129"],"import Character from './Character.js'\n\nfunction MagicPlayer(name, attackPoints, healthPoints, position, type) {\n    Character.call(this, name, attackPoints, healthPoints, position)\n    this.type = type\n    this.equippedSpell  = null\n    this.spells = []\n    this.ultimateCharge = 0\n\n    // this.statusEffects = []\n}\n\nMagicPlayer.prototype = Object.create(Character.prototype);\nObject.defineProperty(MagicPlayer.prototype, 'constructor', { \n    value: MagicPlayer, \n    enumerable: false, // so that it does not appear in 'for in' loop\n    writable: true \n});\n\nMagicPlayer.prototype.attack = function (enemy) {\n    let damageDone = this.attackPoints\n    const startingHealth = enemy.healthPoints\n    if(this.equippedSpell) damageDone += this.equippedSpell.spellPower\n    const randomNumber = Math.floor(Math.random() * 100) + 1\n    // if ( randomNumber <= this.equippedSpell.activationChance) enemy.statusEffects.push({effect: this.equippedSpell.effectName, duration: this.equippedSpell.duration})\n    enemy.statusEffects.forEach(statusEffect => {\n        if(statusEffect.effect === \"armour down\" ) damageDone *= 2\n    })\n    // if ( randomNumber <= this.equippedSpell.activationChance) addEffectToTarget(this.equippedSpell, enemy)\n    if ( randomNumber <= this.equippedSpell.activationChance) Character.prototype.addEffectToTarget.call(this, this.equippedSpell, enemy)\n    enemy.healthPoints = startingHealth - damageDone\n}\n\n\nconst updateStatusEffects = (name, enemyCharacters, setEnemyCharacters) => {\n    const updatedStatusEffects = []\n    enemyCharacters[name].statusEffects.forEach(statusEffect => {\n        statusEffect.duration -= 1\n        if (statusEffect.duration > 0) updatedStatusEffects.push(statusEffect)\n    })\n    const updatableEnemy = enemyCharacters[name]\n    updatableEnemy.statusEffects = updatedStatusEffects\n    console.log(\"updatedStatusEffects\", updatedStatusEffects);\n    console.log(\"updatableEnemy\", updatableEnemy);\n    setEnemyCharacters(prevState => ({...prevState, [name]: updatableEnemy}))\n}\n\n// const addEffectToTarget = (spell, enemy) => {\n//     let stillToAdd = true\n//     const updatedEffects = enemy.statusEffects.map(statusEffect =>{\n//         if( spell.effectName === statusEffect.effect){\n//             if(spell.duration > statusEffect.duration) statusEffect.duration = spell.duration\n//             stillToAdd = false\n//         }\n//         return statusEffect\n//     })\n//     if (stillToAdd) enemy.statusEffects.push({effect: spell.effectName, duration: spell.duration})\n//     else enemy.statusEffects = updatedEffects\n// }\n\nexport default MagicPlayer","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/EquipModal.js",["130","131","132"],"import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom'\nimport Modal from 'react-modal'\n\nimport './AttackPhase.css'\n\n\n    \n    \nconst EquipModal = ({\n    equipModalIsOpen, \n    setEquipModalIsOpen, \n    playerCharacters,\n    setPlayerCharacters,\n    selectedCharacter}) => {\n\n    // const [ equipmentType, setEquipmentType ] = useState(\"\")\n    // useEffect(() =>{\n    //     console.log(\"selectedCharacter\", selectedCharacter);\n    //     if(selectedCharacter === \"meleePlayer\") setEquipmentType(\"Weapon\")\n    //     else if(selectedCharacter === \"magicPlayer\") setEquipmentType(\"Spell\")\n    //     else if(selectedCharacter === \"healerPlayer\") setEquipmentType(\"Heal\")\n    // }, selectedCharacter)\n\n\n    let equipmentType = \"\"\n    if(selectedCharacter === \"meleePlayer\") equipmentType = \"Weapon\"\n    else if(selectedCharacter === \"magicPlayer\") equipmentType= \"Spell\"\n    else if(selectedCharacter === \"healerPlayer\") equipmentType = \"Heal\"\n\n\n    const displayItemsInventory = () => {\n        let itemType = \"\"\n        if(selectedCharacter === \"meleePlayer\") itemType = \"weapons\"\n        else if(selectedCharacter === \"magicPlayer\") itemType= \"spells\"\n        else if(selectedCharacter === \"healerPlayer\") itemType = \"heals\"\n\n        const items = playerCharacters[selectedCharacter][itemType]\n        const displayItemOptions = items.map(item => {\n            let equippedStyle = false\n            if(playerCharacters[selectedCharacter][\"equipped\" + equipmentType] && playerCharacters[selectedCharacter][\"equipped\" + equipmentType].name === item.name) equippedStyle = true\n            return (\n                <div className={equippedStyle ? \"weapon-select-modal-weapon equippedStyle\" : \"weapon-select-modal-weapon\"} onClick={() => handleEquipItem(item)}>\n                    {/* <img src={swordImage} alt='sword' className=\"weapon-select-modal-image\"></img>  */}\n                    {/* <img src={WeaponImages[weapon.name].default} alt='sword' className=\"weapon-select-modal-image\"></img>  */}\n                    <p>{item.name}</p>\n                    <img src={require('../assets/' + item.name + '.png').default} alt={item.name} className=\"weapon-select-modal-image\"></img> \n                    { itemType === \"weapons\" && <p>Damage: {item.attackPower}</p>}\n                    { itemType === \"spells\" && <p>Damage: {item.spellPower}</p>}\n                    { itemType === \"spells\" && <p>Effect: {item.effectName} with {item.activationChance}% chance for {item.duration} turns</p>}\n                    {/* { itemType === \"heals\" && <p>Damage: {item.attackPower}</p>} */}\n                    {/* <button onClick={() => handleEquipItem(item)}>Equip</button> */}\n                </div>\n            )\n        })\n        return displayItemOptions\n    }\n\n    const handleEquipItem = (item) => {\n        const updateableCharacter = playerCharacters[selectedCharacter]\n        updateableCharacter[\"equipped\" + equipmentType] = item\n        setPlayerCharacters(prevState => ({...prevState, [selectedCharacter]: updateableCharacter }))\n    }\n    \n    return (\n        <>\n            {console.log(\"equipmentType\", selectedCharacter)}\n            {equipmentType && <Modal\n                className=\"weapon-select-modal-container\"\n                appElement={document.getElementById('root')}\n                isOpen={equipModalIsOpen}\n                style={{\n                    overlay: {\n                        backgroundColor: 'rgba(0,0,0,0.7)'\n                    }\n                }}\n                >\n                <p>Change {equipmentType}</p>\n                {playerCharacters[selectedCharacter][\"equipped\" + equipmentType] ? \n                    <p>Currently Equipped {equipmentType} {playerCharacters[selectedCharacter][\"equipped\" + equipmentType].name}</p>\n                :\n                    <p>No {equipmentType} Currently Equipped</p>\n                }\n                <div className=\"weapon-select-modal-weapons-container\">\n                    {displayItemsInventory()}\n                </div>\n                <button className=\"weapon-select-modal-button\" onClick={() => handleEquipItem(null)}>Unequip {equipmentType}</button>\n                <button className=\"weapon-select-modal-button\" onClick={() => setEquipModalIsOpen(false)}>Confirm</button>\n            </Modal>}\n        </>\n    )\n}\n\nexport default EquipModal","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Heal.js",[],{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":2,"column":8,"nodeType":"139","messageId":"140","endLine":2,"endColumn":16},{"ruleId":"141","severity":1,"message":"142","line":101,"column":8,"nodeType":"143","endLine":101,"endColumn":22,"suggestions":"144"},{"ruleId":"137","severity":1,"message":"145","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":25},{"ruleId":"141","severity":1,"message":"146","line":44,"column":8,"nodeType":"143","endLine":44,"endColumn":27,"suggestions":"147"},{"ruleId":"137","severity":1,"message":"145","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":25},{"ruleId":"137","severity":1,"message":"148","line":1,"column":38,"nodeType":"139","messageId":"140","endLine":1,"endColumn":44},{"ruleId":"137","severity":1,"message":"138","line":2,"column":8,"nodeType":"139","messageId":"140","endLine":2,"endColumn":16},{"ruleId":"141","severity":1,"message":"149","line":74,"column":8,"nodeType":"143","endLine":74,"endColumn":43,"suggestions":"150"},{"ruleId":"151","severity":1,"message":"152","line":78,"column":9,"nodeType":"153","messageId":"154","endLine":88,"endColumn":10},{"ruleId":"141","severity":1,"message":"155","line":121,"column":8,"nodeType":"143","endLine":121,"endColumn":75,"suggestions":"156"},{"ruleId":"133","replacedBy":"157"},{"ruleId":"135","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":98,"column":74,"nodeType":"161","messageId":"162","endLine":98,"endColumn":110,"fix":"163"},{"ruleId":"159","severity":1,"message":"164","line":113,"column":74,"nodeType":"161","messageId":"162","endLine":113,"endColumn":110,"fix":"165"},{"ruleId":"159","severity":1,"message":"166","line":127,"column":74,"nodeType":"161","messageId":"162","endLine":127,"endColumn":111,"fix":"167"},{"ruleId":"151","severity":1,"message":"152","line":27,"column":9,"nodeType":"153","messageId":"154","endLine":40,"endColumn":10},{"ruleId":"137","severity":1,"message":"168","line":48,"column":7,"nodeType":"139","messageId":"140","endLine":48,"endColumn":24},{"ruleId":"151","severity":1,"message":"152","line":9,"column":5,"nodeType":"153","messageId":"154","endLine":26,"endColumn":6},{"ruleId":"137","severity":1,"message":"138","line":4,"column":8,"nodeType":"139","messageId":"140","endLine":4,"endColumn":16},{"ruleId":"137","severity":1,"message":"169","line":5,"column":8,"nodeType":"139","messageId":"140","endLine":5,"endColumn":13},{"ruleId":"137","severity":1,"message":"170","line":23,"column":13,"nodeType":"139","messageId":"140","endLine":23,"endColumn":36},{"ruleId":"137","severity":1,"message":"171","line":23,"column":38,"nodeType":"139","messageId":"140","endLine":23,"endColumn":64},{"ruleId":"137","severity":1,"message":"172","line":26,"column":13,"nodeType":"139","messageId":"140","endLine":26,"endColumn":27},{"ruleId":"137","severity":1,"message":"173","line":26,"column":29,"nodeType":"139","messageId":"140","endLine":26,"endColumn":46},{"ruleId":"137","severity":1,"message":"174","line":47,"column":11,"nodeType":"139","messageId":"140","endLine":47,"endColumn":33},{"ruleId":"137","severity":1,"message":"145","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":25},{"ruleId":"137","severity":1,"message":"175","line":1,"column":8,"nodeType":"139","messageId":"140","endLine":1,"endColumn":27},{"ruleId":"137","severity":1,"message":"176","line":35,"column":7,"nodeType":"139","messageId":"140","endLine":35,"endColumn":26},{"ruleId":"137","severity":1,"message":"145","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":25},{"ruleId":"137","severity":1,"message":"177","line":1,"column":27,"nodeType":"139","messageId":"140","endLine":1,"endColumn":36},{"ruleId":"137","severity":1,"message":"138","line":2,"column":8,"nodeType":"139","messageId":"140","endLine":2,"endColumn":16},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'enemy1', 'enemy2', 'enemy3', 'enemyCharacters', and 'playerCharacters'. Either include them or remove the dependency array.","ArrayExpression",["180"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'playerCharacters'. Either include it or remove the dependency array.",["181"],"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'squareNumber'. Either include it or remove the dependency array.",["182"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'enemyCharacters', 'image', 'selectedCharacter', and 'squareNumber'. Either include them or remove the dependency array.",["183"],["178"],["179"],"no-useless-computed-key","Unnecessarily computed property [\"meleePlayer\"] found.","Property","unnecessarilyComputedProperty",{"range":"184","text":"185"},"Unnecessarily computed property [\"magicPlayer\"] found.",{"range":"186","text":"187"},"Unnecessarily computed property [\"healerPlayer\"] found.",{"range":"188","text":"189"},"'addEffectToTarget' is assigned a value but never used.","'Modal' is defined but never used.","'weaponChangeModalIsOpen' is assigned a value but never used.","'setWeaponChangeModalIsOpen' is assigned a value but never used.","'equippedWeapon' is assigned a value but never used.","'setEquippedWeapon' is assigned a value but never used.","'displayWeaponInventory' is assigned a value but never used.","'CharacterTurnSelect' is defined but never used.","'updateStatusEffects' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},[5342,5357],"\"meleePlayer\"",[6308,6323],"\"magicPlayer\"",[7284,7300],"\"healerPlayer\"","Update the dependencies array to be: [currentPhase, enemy1, enemy2, enemy3, enemyCharacters, playerCharacters]",{"range":"198","text":"199"},"Update the dependencies array to be: [playerCharacters, selectedCharacter]",{"range":"200","text":"201"},"Update the dependencies array to be: [playerCharacters, enemyCharacters, squareNumber]",{"range":"202","text":"203"},"Update the dependencies array to be: [movableSquares, attackableSquares, playerCharacters, currentPhase, selectedCharacter, image, squareNumber, enemyCharacters]",{"range":"204","text":"205"},[3984,3998],"[currentPhase, enemy1, enemy2, enemy3, enemyCharacters, playerCharacters]",[1418,1437],"[playerCharacters, selectedCharacter]",[2784,2819],"[playerCharacters, enemyCharacters, squareNumber]",[5190,5257],"[movableSquares, attackableSquares, playerCharacters, currentPhase, selectedCharacter, image, squareNumber, enemyCharacters]"]