[{"/Users/chrisfraser/projects/react_RPG/react_rpg/src/index.js":"1","/Users/chrisfraser/projects/react_RPG/react_rpg/src/reportWebVitals.js":"2","/Users/chrisfraser/projects/react_RPG/react_rpg/src/App.js":"3","/Users/chrisfraser/projects/react_RPG/react_rpg/src/screens/GameScreen.js":"4","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameActionBar.js":"5","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameBoard.js":"6","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameSquare.js":"7","/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/boardImages.js":"8","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/MovementPhase.js":"9","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Character.js":"10","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Enemy.js":"11","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleePlayer.js":"12","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/meleeWeapon.js":"13","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleeWeapon.js":"14","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/AttackPhase.js":"15","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/CharacterTurnSelect.js":"16"},{"size":500,"mtime":1608752934000,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1608752934002,"results":"19","hashOfConfig":"18"},{"size":230,"mtime":1608770853174,"results":"20","hashOfConfig":"18"},{"size":12416,"mtime":1611368435192,"results":"21","hashOfConfig":"18"},{"size":3827,"mtime":1611364667682,"results":"22","hashOfConfig":"18"},{"size":3822,"mtime":1611364397458,"results":"23","hashOfConfig":"18"},{"size":13028,"mtime":1611367470710,"results":"24","hashOfConfig":"18"},{"size":128,"mtime":1586701404653,"results":"25","hashOfConfig":"18"},{"size":3827,"mtime":1611367800365,"results":"26","hashOfConfig":"18"},{"size":526,"mtime":1611367563975,"results":"27","hashOfConfig":"18"},{"size":12746,"mtime":1611367514999,"results":"28","hashOfConfig":"18"},{"size":1406,"mtime":1610655153713,"results":"29","hashOfConfig":"18"},{"size":154,"mtime":1610323315030,"results":"30","hashOfConfig":"18"},{"size":154,"mtime":1610323315030,"results":"31","hashOfConfig":"18"},{"size":3560,"mtime":1611364768593,"results":"32","hashOfConfig":"18"},{"size":1070,"mtime":1611350806877,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"13roori",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},"/Users/chrisfraser/projects/react_RPG/react_rpg/src/index.js",[],["71","72"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/reportWebVitals.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/App.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/screens/GameScreen.js",["73","74","75","76","77"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport Modal from 'react-modal'\n\nimport './GameScreen.css'\nimport GameBoard from '../components/GameBoard'\nimport GameActionBar from '../components/GameActionBar'\n\nimport Character from '../models/Character.js'\nimport MeleePlayer from '../models/MeleePlayer.js'\nimport MagicPlayer from '../models/MeleePlayer.js'\nimport HealerPlayer from '../models/MeleePlayer.js'\nimport MeleeWeapon from '../models/MeleeWeapon.js'\nimport Enemy from '../models/Enemy.js'\n\nconst boardWidth = 5\nconst boardHeight = 5\n\nconst GameScreen = () =>{\n\n\n    const [ enemyMovementPhase, setEnemyMovementPhase ] = useState(false)\n    const [ selectedCharacter, setSelectedCharacter ] = useState(null)\n    const [ usedCharacters, setUsedCharacters ] = useState([])\n    const [ currentPhase, setCurrentPhase ] = useState(\"characterTurnSelect\")\n    const [ modalIsOpen, setModalIsOpen ] = useState(false)\n    const [ modalCharacter, setModalCharacter ] = useState(null)\n\n    useEffect(() =>{\n        if(usedCharacters.length === 3) {\n            setCurrentPhase(\"enemyMovement\")\n            setUsedCharacters([])\n        }\n    }, [usedCharacters])\n\n    useEffect(() =>{\n        const bob = new Character(\"bob\", 10, 20)\n        // const orc = new Enemy(\"orc\", 1, 100, 15)\n        const karen = new MeleePlayer(\"karen\", 10, 20, 11, \"Knight\")\n        const club = new MeleeWeapon(\"club-5\", 5, \"sword\")\n\n        // THIS IS FOR MOVING ENEMY!\n        let timeout = 0\n        let timeout2 = 0\n        let timeout3 = 0\n\n        if (currentPhase === \"enemyMovement\") {\n            timeout = enemy1.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n            setTimeout(() => {\n                timeout2 = enemy2.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n                setTimeout(() => {\n                    timeout3 = enemy3.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n                    setTimeout(() => setCurrentPhase(\"characterTurnSelect\"), (timeout3 + 500))\n                }, (timeout2))\n            }, timeout)\n        }\n\n        // if (currentPhase === \"enemyMovement\") {\n        //     console.log(\"RUNNING22222222\")\n        //     timeout = enemy1.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        //     console.log(\"1\", timeout)\n\n        //     setTimeout(() => {\n        //         timeout2 = enemy2.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        //         console.log(\"2\", timeout2)\n        //     }, timeout)\n        //     setTimeout(() => {\n        //         timeout3 = enemy3.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        //         console.log(\"3\", timeout3)\n\n        //     }, (timeout + timeout2))\n        //     setTimeout(() => setCurrentPhase(\"playerMovement\"), (timeout + timeout2 + timeout3))\n        // }\n\n        // const movedEnemy = enemy1.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        // const movedEnemy2 = enemy2.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        // const movedEnemy3 = enemy3.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        // const tempEnemyCharacters = JSON.parse(JSON.stringify(enemyCharacters))\n        // setTimeout(() => setEnemyCharacters(tempEnemyCharacters), 2000)\n\n        // let tempEnemyCharacters = null\n        // setTimeout(() => {\n        //     const movedEnemy = enemy1.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        //     tempEnemyCharacters = JSON.parse(JSON.stringify(enemyCharacters))\n        //     setEnemyCharacters(tempEnemyCharacters)\n        // }, 1000)\n\n        // setTimeout(() => {\n        //     const movedEnemy = enemy2.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        //     tempEnemyCharacters = JSON.parse(JSON.stringify(enemyCharacters))\n        //     setEnemyCharacters(tempEnemyCharacters)\n        // }, 2000)\n\n        // setTimeout(() => {\n        //     const movedEnemy = enemy3.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        //     tempEnemyCharacters = JSON.parse(JSON.stringify(enemyCharacters))\n        //     setEnemyCharacters(tempEnemyCharacters)\n        // }, 3000)\n        \n\n\n        // tempEnemyCharacters = JSON.parse(JSON.stringify(enemyCharacters))\n        // tempEnemyCharacters[enemy1.name] = movedEnemy\n        // tempEnemyCharacters[enemy2.name] = movedEnemy2\n        // tempEnemyCharacters[enemy3.name] = movedEnemy3\n        // setTimeout(() => setEnemyCharacters(tempEnemyCharacters), 6000)\n\n        // const movingEnemy = \n        // console.log(\"newPosition\", newPosition)\n        // console.log(enemyCharacters)\n\n\n        // karen.equipedWeapon = club\n        // karen.attack(enemy1)\n        // console.log(\"enemy1\", enemy1)\n        // console.log(\"karen\", karen)\n\n\n    }, [currentPhase])\n\n    // const [ magicPosition, setMagicPosition ] = useState(16)\n    // const [ meleePosition, setMeleePosition ] = useState(11)\n    // const [ healerPosition, setHealerPosition ] = useState(6)\n\n    // THIS WORKED!!!!!!\n    // let startingPlayerCharacters = {\n    //     meleePlayer: {\n    //         position: 11,\n    //         type: \"Knight\",\n    //         name: \"Jeff\"\n    //     },\n    //     magicPlayer: {\n    //         position: 16,\n    //         type: \"Mage\",\n    //         name: \"Dave\"\n    //     },\n    //     healerPlayer: {\n    //         position: 6,\n    //         type: \"Priest\",\n    //         name: \"Bob\"\n    //     }\n    // }\n\n    // TRYING THIS!!!!!!!!\n    const ken = new MeleePlayer(\"ken\", 30, 100, 11, \"Knight\")\n    const matt = new MagicPlayer(\"matt\", 20, 100, 6, \"mage\")\n    const peter = new HealerPlayer(\"peter\", 10, 100, 16, \"priest\")\n    const sword = new MeleeWeapon(\"club-5\", 5, \"club\")\n    ken.equipedWeapon = sword\n\n    let startingPlayerCharacters = {\n        meleePlayer: ken,\n        magicPlayer: matt,\n        healerPlayer: peter\n    }\n\n\n    const enemy1 = new Enemy(\"enemy1\", 1, 100, 10)\n    const enemy2 = new Enemy(\"enemy2\", 1, 100, 15)\n    const enemy3 = new Enemy(\"enemy3\", 1, 100, 20)\n\n    let startingEnemyCharacters = {\n        enemy1: enemy1,\n        enemy2: enemy2,\n        enemy3: enemy3\n    }\n\n    const [ playerCharacters, setPlayerCharacters ] = useState(startingPlayerCharacters)\n    const [ enemyCharacters, setEnemyCharacters ] = useState(startingEnemyCharacters)\n\n\n    \n\n\n    const [ movableSquares, setMovableSquares ] = useState([])\n    const [ attackableSquares, setAttackableSquares ] = useState([])\n\n    const calculateMovementLocations = (startingPosition, numberOfStepsAllowed) => {\n\n        const movableLocations = []\n        // switch(characterToMove){\n        //     case \"meleePlayer\":\n        //         movableLocations.push(meleePosition)\n        //         break\n        //     case \"magicPlayer\":\n        //         movableLocations.push(magicPosition)\n        //         break\n        //     case \"healerPlayer\":\n        //         movableLocations.push(healerPosition)\n        //         break\n        // }\n        // movableLocations.push(playerCharacters[characterToMove][\"position\"])\n        movableLocations.push(startingPosition)\n\n        for (let i = 1; i <= numberOfStepsAllowed; i++){\n            movableLocations.forEach( movableLocation => {\n                const currentRow = Math.ceil(movableLocation / boardWidth)\n                // if ((movableLocation + boardWidth) < (boardWidth * boardHeight) && !movableLocations.includes(movableLocation + boardWidth)) movableLocations.push(movableLocation + boardWidth)\n                if ((movableLocation + boardWidth) < (boardWidth * boardHeight)) {\n                    if (!movableLocations.includes(movableLocation + boardWidth)) movableLocations.push(movableLocation + boardWidth)\n                } \n                if ((movableLocation - boardWidth) > 0) {\n                    if (!movableLocations.includes(movableLocation - boardWidth)) movableLocations.push(movableLocation - boardWidth)\n                }\n                const nextSquareRow = Math.ceil(((movableLocation + 1) / boardWidth))\n                if (nextSquareRow === currentRow) {\n                    if (!movableLocations.includes(movableLocation + 1)) movableLocations.push(movableLocation + 1)\n                }\n                const previousSquareRow = Math.ceil(((movableLocation - 1) / boardWidth))\n                if (previousSquareRow === currentRow) {\n                    if (!movableLocations.includes(movableLocation - 1)) movableLocations.push(movableLocation - 1)\n                }\n            })\n        }\n        console.log(movableLocations)\n        setMovableSquares(movableLocations)\n    }\n\n    const calculateAttackLocations = (characterToAttack, attackRange) => {\n        const currentPosition = playerCharacters[characterToAttack][\"position\"]\n        const currentRow = Math.ceil(currentPosition / boardWidth)\n        const attackableLocations = []\n\n        for (let i = 1 ; i <= attackRange ; i++) {\n            if( currentPosition + (i * 5) < boardWidth * boardHeight ) attackableLocations.push(currentPosition + (i * 5))\n            if( currentPosition - (i * 5) > 0 ) attackableLocations.push(currentPosition - (i * 5))\n            if( Math.ceil((currentPosition + (i * 1)) / boardWidth) === currentRow ) attackableLocations.push(currentPosition + (i * 1))\n            if( Math.ceil((currentPosition - (i * 1)) / boardWidth) === currentRow ) attackableLocations.push(currentPosition - (i * 1))\n        }\n        console.log(\"attackableLocations\", attackableLocations)\n        setAttackableSquares(attackableLocations)\n    }\n\n    const handleImageClick = (character) => {\n        setModalIsOpen(true)\n        setModalCharacter(character)\n    }\n\n    return (\n        <div>\n            <p>GameScreen</p>\n            <GameBoard \n                selectedCharacter={selectedCharacter} \n                currentPhase={currentPhase}\n                setCurrentPhase={setCurrentPhase}\n                // magicPosition={magicPosition}\n                // healerPosition={healerPosition}\n                // meleePosition={meleePosition}\n                // setMagicPosition={setMagicPosition}\n                // setHealerPosition={setHealerPosition}\n                // setMeleePosition={setMeleePosition}\n                movableSquares={movableSquares}\n                attackableSquares={attackableSquares}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                enemyCharacters={enemyCharacters}\n                handleImageClick={handleImageClick}\n                usedCharacters={usedCharacters}\n                setUsedCharacters={setUsedCharacters}\n                setAttackableSquares={setAttackableSquares}\n            />\n            <GameActionBar \n                selectedCharacter={selectedCharacter}\n                setSelectedCharacter={setSelectedCharacter} \n                currentPhase={currentPhase} \n                setCurrentPhase={setCurrentPhase}\n                calculateMovementLocations={calculateMovementLocations}\n                calculateAttackLocations={calculateAttackLocations}\n                setMovableSquares={setMovableSquares}\n                setAttackableSquares={setAttackableSquares}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                enemyMovementPhase={enemyMovementPhase}\n                setEnemyMovementPhase={setEnemyMovementPhase}\n                usedCharacters={usedCharacters}\n                setUsedCharacters={setUsedCharacters}\n            />\n            {modalCharacter && <Modal\n                className=\"modal-container\"\n                appElement={document.getElementById('root')}\n                isOpen={modalIsOpen}\n                style={{\n                    overlay: {\n                        backgroundColor: 'rgba(0,0,0,0.7)'\n                    }\n                }}\n            >\n                <button className=\"modal-close-button\" onClick={() => setModalIsOpen(false)}>\n\t\t\t\t\tClose\n\t\t\t\t</button>\n                <p>{modalCharacter.name}</p>\n                <p>Attack: {modalCharacter.attackPoints}</p>\n                <p>Health: {modalCharacter.healthPoints}</p>\n                <p>status: {modalCharacter.statusEffects[0]}</p>\n\n            </Modal>}\n           \n        </div>\n    )\n\n}\n\nexport default GameScreen\n","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameActionBar.js",["78","79"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameBoard.js",["80"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameSquare.js",["81","82","83","84","85","86","87","88"],"import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom'\nimport Modal from 'react-modal'\nimport './GameSquare.css'\nimport mageImage from '../assets/mage.png'\nimport knightImage from '../assets/knight.png'\nimport healerImage from '../assets/healer.png'\nimport orcImage from '../assets/orc.png'\n\n\n// import { StyleSheet, Text, View, Dimensions, Image, Modal } from 'react-native';\n\n// import Modal from 'modal-enhanced-react-native-web';\n// import Modal from 'modal-react-native-web'\n\n\nimport boardImages from '../assets/boardImages'\n\n\n// const width = Dimensions.get('window').width\nconst width = window.innerWidth\n// let character = null\n\n\nconst GameSquare = ({ \n    squareNumber, \n    setCurrentPhase,\n    // playerPositions, \n    movableSquares, \n    attackableSquares,\n    selectedCharacter,\n    // meleePosition,\n    // magicPosition,\n    // healerPosition,\n    // setMeleePosition, \n    // setMagicPosition, \n    // setHealerPosition,\n    playerCharacters,\n    setPlayerCharacters,\n    enemyCharacters,\n    handleImageClick,\n    usedCharacters,\n    setUsedCharacters,\n    setAttackableSquares\n }) =>{\n\n    const [ image, setImage ] = useState(null)\n    // const [ modalVisable, setModalVisable ] = useState(false)\n    const [ squareStyling, setSquareStyling ] = useState(\"\")\n    const [ character, setCharacter ] = useState(null)\n    const [ modalIsOpen, setModalIsOpen ] = useState(false)\n\n//test!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // const [ fing, setFing ] = useState(\"meleePlayer\")\n    // const meleeRef = useRef()\n    // const magicRef = useRef()\n    // const healerRef = useRef()\n    // const characterRef = useRef()\n\n    // const handleImageClick = (character) => {\n    //     meleeRef.current.classList.add(\"blah\")\n    // }\n\n    // let makeRef = meleeRef\n//test end here!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n    // const mage = {\n    //     \"image\": \"mage\",\n    //     \"maxHp\": 10,\n    //     \"currentHp\": 6,\n    //     \"baseAttack\": 8, \n    //     \"equipedWeapon\": null,\n    //     \"inventory\": null,\n    //     \"spells\": null\n    // }\n\n    // useEffect(() => {\n    //     if (magicPosition === squareNumber) {\n    //         // setImage(mage.image)\n    //         // setImage('../assets/mage.png')\n    //         setImage(mageImage)\n    //     } else if (meleePosition === squareNumber) {\n    //         // setImage(\"knight\")\n    //         // setImage('../assets/knight.png')\n    //         setImage(knightImage)\n    //     } else if (healerPosition === squareNumber) {\n    //         setImage(healerImage) \n    //     } else {\n    //         setImage(null)\n    //     }\n\n    //     // if (squareNumber === 3){\n    //     //     setModalVisable(true)\n    //     // }\n    // }, [magicPosition, meleePosition, healerPosition])\n    \n    useEffect(() => {\n        if (playerCharacters[\"magicPlayer\"][\"position\"] === squareNumber) {\n            // setImage(mage.image)\n            // setImage('../assets/mage.png')\n            setCharacter(playerCharacters[\"magicPlayer\"])\n            setImage(mageImage)\n        } else if (playerCharacters[\"meleePlayer\"][\"position\"] === squareNumber) {\n            // setImage(\"knight\")\n            // setImage('../assets/knight.png')\n            setCharacter(playerCharacters[\"meleePlayer\"])\n            setImage(knightImage)\n        } else if (playerCharacters[\"healerPlayer\"][\"position\"] === squareNumber) {\n            setCharacter(playerCharacters[\"healerPlayer\"])\n            setImage(healerImage) \n        } else {\n            setImage(null)\n        }\n        if (enemyCharacters[\"enemy1\"][\"position\"] === squareNumber){\n            setCharacter(enemyCharacters[\"enemy1\"])\n            setImage(orcImage)\n        } else if (enemyCharacters[\"enemy2\"][\"position\"] === squareNumber){\n            setCharacter(enemyCharacters[\"enemy2\"])\n            setImage(orcImage)\n        } else if (enemyCharacters[\"enemy3\"][\"position\"] === squareNumber){\n            setCharacter(enemyCharacters[\"enemy3\"])\n            setImage(orcImage)\n        } \n\n        // if (squareNumber === 3){\n        //     setModalVisable(true)\n        // }\n    }, [playerCharacters, enemyCharacters])\n    \n    // useEffect(() =>{\n    //     if (enemyCharacters[\"one\"][\"position\"] === squareNumber){\n    //         setImage(orcImage)\n    //     }\n    // }, [enemyCharacters, playerCharacters])\n\n\n    useEffect(() => {\n        let currentImage = null\n        switch (selectedCharacter) {\n            case \"meleePlayer\":\n                currentImage = knightImage\n                break\n            case \"magicPlayer\":\n                currentImage = mageImage\n                break\n            case \"healerPlayer\":\n                currentImage = healerImage\n                break\n        }\n        if (( image === null || image === currentImage ) && movableSquares.includes(squareNumber) ) {\n            setSquareStyling(\"movable\")\n        } else if (attackableSquares.includes(squareNumber)) {\n            setSquareStyling(\"attackable\")\n        } else {\n            setSquareStyling(\"\")\n        }\n    }, [movableSquares, attackableSquares])\n\n    const [ refresh, setRefresh ] = useState(false)\n\n    const handleClickSquare = () => {\n        if ( squareStyling === \"movable\"){\n            // switch (selectedCharacter) {\n            //     case \"meleePlayer\":\n            //         setMeleePosition(squareNumber)\n            //         break\n            //     case \"magicPlayer\":\n            //         setMagicPosition(squareNumber)\n            //         break\n            //     case \"healerPlayer\":\n            //         setHealerPosition(squareNumber)\n            //         break\n            // }\n            //BROKEN!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n            // console.log(\"BEFOREEEEEE\", playerCharacters)\n            // const tempPlayerCharacters = JSON.parse(JSON.stringify(playerCharacters))\n            // console.log(\"AFTERRRRRRR\", tempPlayerCharacters)\n            // tempPlayerCharacters[selectedCharacter][\"position\"] = squareNumber\n            // setPlayerCharacters(tempPlayerCharacters)\n\n            // ATTEMP TO FIX!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n            // playerCharacters[selectedCharacter][\"position\"] = squareNumber\n            const updateableCharacter = playerCharacters[selectedCharacter]\n            updateableCharacter.position = squareNumber\n            setPlayerCharacters(prevState => ({...prevState, [selectedCharacter]: updateableCharacter }))\n\n        } else if ( squareStyling === \"attackable\" && image !== null) {\n            setModalIsOpen(true)\n            // playerCharacters[selectedCharacter].attack(character)\n        }\n    }\n\n    const handleModalAttack = () => {\n        setModalIsOpen(false)\n        playerCharacters[selectedCharacter].attack(character)\n        setCurrentPhase(\"characterTurnSelect\")\n        const updatedUsedCharacters = [...usedCharacters, selectedCharacter]\n        setUsedCharacters(updatedUsedCharacters)\n        setAttackableSquares([])\n    }\n    \n    if (width > 500) {\n        return (\n            <>\n                <div onClick={() => handleClickSquare()} className={`bigger-square-container ${squareStyling}`}>\n                    {image ? \n                        <img src={image} alt={image} className=\"game-square-image\" onClick={() => handleImageClick(character)}></img> \n                    : \n                        <p>{squareNumber}</p>\n                        // <p></p>\n\n                    }\n                    \n                    {/* <p>{squareNumber}</p>\n                    {image && <img src={image} alt={image} className=\"game-square-image\"></img>} */}\n\n                    {/* {image && <Image\n                        style={{\n                            width: 80,\n                            height: 80,\n                            // alignSelf: \"center\",\n                            // justifyContent: \"center\"\n                            // borderRadius: 20,\n                            // marginTop: 10,\n                            // marginHorizontal: 16\n                        }}\n                        // source={require(\"../assets/knight.png\")}\n                        source={boardImages[image]}\n                        // source={{uri: animalImageURL}}\n                    />} */}\n\n                    {/* <Modal\n                        style={{height: 500, width: 100}}\n                        // animationType=\"slide\"\n                        // transparent={true}\n                        visible={true}\n                        // onRequestClose={() => {\n                        // Alert.alert(\"Modal has been closed.\");\n                        // }}\n                    >\n                        <Text>Hi</Text>\n                    </Modal> */}\n                </div>\n                {character && selectedCharacter && <Modal\n                    className=\"modal-container\"\n                    appElement={document.getElementById('root')}\n                    isOpen={modalIsOpen}\n                    style={{\n                        overlay: {\n                            backgroundColor: 'rgba(0,0,0,0.7)'\n                        }\n                    }}\n                    >\n                    <p>Attack {character.name} with {playerCharacters[selectedCharacter].type}?</p>\n                    {selectedCharacter === \"meleePlayer\" && <p>Current equiped Weapon is {playerCharacters[selectedCharacter].equipedWeapon.name}</p>}\n                    <p>This will end this characters turn</p>\n                    <button onClick={() => handleModalAttack()}>Yes</button>\n                    <button onClick={() => setModalIsOpen(false)}>No</button>\n\n                </Modal>}\n            </>\n        )\n    } else {\n        return (\n            // <div style={styles.container}>\n            <div onClick={() => handleClickSquare()} className={`smaller-square-container ${squareStyling}`}>\n\n                {/* <p>{squareNumber}</p> */}\n                {image ? \n                    <img src={image} alt={image} className=\"game-square-image\" onClick={() => handleImageClick(character)}></img> \n                :\n                    <p>{squareNumber}</p>\n                    // <p></p>\n                }\n\n                {/* {image && <Image\n                    style={{\n                        width: width/5 - 15,\n                        height: width/5 - 15,\n                        // alignSelf: \"center\",\n                        // justifyContent: \"center\"\n                        // borderRadius: 20,\n                        // marginTop: 10,\n                        // marginHorizontal: 16\n                    }}\n                    // source={require(\"../assets/knight.png\")}\n                    source={boardImages[image]}\n                    // source={{uri: animalImageURL}}\n                />} */}\n                {/* <Modal\n                // style={{height: 50, width: 50}}\n                // animationType=\"slide\"\n                transparent={true}\n                visible={false}\n                // onRequestClose={() => {\n                // Alert.alert(\"Modal has been closed.\");\n                // }}\n            >  \n                <View style={{\n                    flex: 1,\n                    flexDirection: 'column',\n                    // backgroundColor: '#00000080',\n                    backgroundColor: 'rgba(80,80,80,0.09)',\n                    justifyContent: 'center',\n                    alignItems: 'center'}}>\n                    <View style={{\n                        width: 300,\n                        height: 500,\n                        backgroundColor: '#fff', \n                        padding: 20}}>\n                            \n                    <Text>Hi {console.log(\"in modal\", modalVisable + \" \" + squareNumber)\n                    }</Text>\n                    \n                    </View>\n                </View> */}\n                {/* <View style={{height: 70, width:50}}>\n                    <Text>Hi</Text>\n                </View> */}\n            {/* </Modal> */}\n{/* <Modal\n                    style={{height: 50, width: 10}}\n                    // animationType=\"slide\"\n                    // transparent={true}\n                    visible={false}\n                    // onRequestClose={() => {\n                    // Alert.alert(\"Modal has been closed.\");\n                    // }}\n                >\n                    <Text>Hi</Text>\n                </Modal> */}\n            </div>\n        )\n    }\n\n}\n\n// const styles = StyleSheet.create({\n//     container: {\n//         // flex: 1,\n//     //   border: '1 solid black',\n//         // borderColor: 'black',\n//         borderWidth: 1,\n//         // borderStyle: 'solid',\n//         width: width/5 - 15,\n//         height: width/5 - 15\n\n//         // backgroundColor: '#fff',\n//         // alignItems: 'center',\n//         // justifyContent: 'center',\n//     },\n//     biggerContainer: {\n//         borderWidth: 1,\n//         width: 85,\n//         height: 85,\n\n//     },\n//   });\n\nexport default GameSquare\n\n","/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/boardImages.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/MovementPhase.js",["89","90","91","92","93","94"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Character.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Enemy.js",["95","96","97"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleePlayer.js",["98"],"import Character from './Character.js'\n\nfunction MeleePlayer(name, attackPoints, healthPoints, position, type) {\n    Character.call(this, name, attackPoints, healthPoints, position)\n    this.type = type\n    this.equipedWeapon  = null\n    this.weapons = []\n    this.ultimateCharge = 0\n\n    // this.statusEffects = []\n}\n\nMeleePlayer.prototype = Object.create(Character.prototype);\nObject.defineProperty(MeleePlayer.prototype, 'constructor', { \n    value: MeleePlayer, \n    enumerable: false, // so that it does not appear in 'for in' loop\n    writable: true \n});\n\nMeleePlayer.prototype.attack = function (enemy){\n    let damageDone = this.attackPoints\n    const startingHealth = enemy.healthPoints;\n\n    if(this.equipedWeapon) {\n        damageDone += this.equipedWeapon.attackPower\n        const randomNumber = Math.floor(Math.random() * 100) + 1\n        switch(this.equipedWeapon.type){\n            case(\"sword\"):\n                if(randomNumber <= 25) damageDone *= 2\n                break\n            case(\"axe\"):\n                if(randomNumber <= 10) damageDone = startingHealth\n                else if(randomNumber <= 20) enemy.statusEffects.push(\"attack down\")\n                break\n            case(\"club\"):\n                if(randomNumber <= 25) enemy.statusEffects.push(\"stun\")\n                break\n        }\n    }\n    enemy.healthPoints = startingHealth - damageDone\n}\n\nexport default MeleePlayer","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/meleeWeapon.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleeWeapon.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/AttackPhase.js",["99","100","101","102"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/CharacterTurnSelect.js",["103"],"import React, { useState } from 'react';\n\nconst CharacterTurnSelect = ({\n    playerCharacters,\n    setSelectedCharacter,\n    usedCharacters,\n    setCurrentPhase,\n    calculateMovementLocations }) => {\n\n\n    const handleSelectCharacter = (character) => {\n        setSelectedCharacter(character)\n        calculateMovementLocations(playerCharacters[character].position, 2)\n        setCurrentPhase(\"playerMovement\")\n    }\n\n    return (\n        <div>\n            <p>Select a character to control...</p>\n            <button disabled={usedCharacters.includes(\"meleePlayer\")} onClick={() => handleSelectCharacter(\"meleePlayer\")}>Knight</button>\n            <button disabled={usedCharacters.includes(\"magicPlayer\")} onClick={() => handleSelectCharacter(\"magicPlayer\")}>Mage</button>\n            <button disabled={usedCharacters.includes(\"healerPlayer\")} onClick={() => handleSelectCharacter(\"healerPlayer\")}>Healer</button>\n            {/* <button onClick={() => handleEndMovementPhase()}>End Movement Phase</button> */}\n        </div>\n    )\n}\n\nexport default CharacterTurnSelect",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":2,"column":8,"nodeType":"110","messageId":"111","endLine":2,"endColumn":16},{"ruleId":"108","severity":1,"message":"112","line":37,"column":15,"nodeType":"110","messageId":"111","endLine":37,"endColumn":18},{"ruleId":"108","severity":1,"message":"113","line":39,"column":15,"nodeType":"110","messageId":"111","endLine":39,"endColumn":20},{"ruleId":"108","severity":1,"message":"114","line":40,"column":15,"nodeType":"110","messageId":"111","endLine":40,"endColumn":19},{"ruleId":"115","severity":1,"message":"116","line":119,"column":8,"nodeType":"117","endLine":119,"endColumn":22,"suggestions":"118"},{"ruleId":"108","severity":1,"message":"119","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":25},{"ruleId":"115","severity":1,"message":"120","line":48,"column":8,"nodeType":"117","endLine":48,"endColumn":27,"suggestions":"121"},{"ruleId":"108","severity":1,"message":"119","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":25},{"ruleId":"108","severity":1,"message":"122","line":1,"column":38,"nodeType":"110","messageId":"111","endLine":1,"endColumn":44},{"ruleId":"108","severity":1,"message":"109","line":2,"column":8,"nodeType":"110","messageId":"111","endLine":2,"endColumn":16},{"ruleId":"108","severity":1,"message":"123","line":17,"column":8,"nodeType":"110","messageId":"111","endLine":17,"endColumn":19},{"ruleId":"115","severity":1,"message":"124","line":129,"column":8,"nodeType":"117","endLine":129,"endColumn":43,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":140,"column":9,"nodeType":"128","messageId":"129","endLine":150,"endColumn":10},{"ruleId":"115","severity":1,"message":"130","line":158,"column":8,"nodeType":"117","endLine":158,"endColumn":43,"suggestions":"131"},{"ruleId":"108","severity":1,"message":"132","line":160,"column":13,"nodeType":"110","messageId":"111","endLine":160,"endColumn":20},{"ruleId":"108","severity":1,"message":"133","line":160,"column":22,"nodeType":"110","messageId":"111","endLine":160,"endColumn":32},{"ruleId":"108","severity":1,"message":"122","line":1,"column":27,"nodeType":"110","messageId":"111","endLine":1,"endColumn":33},{"ruleId":"108","severity":1,"message":"134","line":1,"column":35,"nodeType":"110","messageId":"111","endLine":1,"endColumn":44},{"ruleId":"108","severity":1,"message":"135","line":15,"column":13,"nodeType":"110","messageId":"111","endLine":15,"endColumn":28},{"ruleId":"108","severity":1,"message":"136","line":15,"column":30,"nodeType":"110","messageId":"111","endLine":15,"endColumn":48},{"ruleId":"108","severity":1,"message":"137","line":27,"column":11,"nodeType":"110","messageId":"111","endLine":27,"endColumn":32},{"ruleId":"108","severity":1,"message":"138","line":61,"column":11,"nodeType":"110","messageId":"111","endLine":61,"endColumn":33},{"ruleId":"108","severity":1,"message":"139","line":74,"column":13,"nodeType":"110","messageId":"111","endLine":74,"endColumn":32},{"ruleId":"108","severity":1,"message":"140","line":190,"column":15,"nodeType":"110","messageId":"111","endLine":190,"endColumn":36},{"ruleId":"108","severity":1,"message":"141","line":240,"column":13,"nodeType":"110","messageId":"111","endLine":240,"endColumn":45},{"ruleId":"126","severity":1,"message":"127","line":27,"column":9,"nodeType":"128","messageId":"129","endLine":38,"endColumn":10},{"ruleId":"108","severity":1,"message":"142","line":18,"column":13,"nodeType":"110","messageId":"111","endLine":18,"endColumn":31},{"ruleId":"108","severity":1,"message":"143","line":18,"column":33,"nodeType":"110","messageId":"111","endLine":18,"endColumn":54},{"ruleId":"108","severity":1,"message":"137","line":21,"column":11,"nodeType":"110","messageId":"111","endLine":21,"endColumn":32},{"ruleId":"108","severity":1,"message":"144","line":44,"column":11,"nodeType":"110","messageId":"111","endLine":44,"endColumn":31},{"ruleId":"108","severity":1,"message":"119","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":25},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'bob' is assigned a value but never used.","'karen' is assigned a value but never used.","'club' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'enemy1', 'enemy2', 'enemy3', 'enemyCharacters', and 'playerCharacters'. Either include them or remove the dependency array.","ArrayExpression",["147"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'playerCharacters'. Either include it or remove the dependency array.",["148"],"'useRef' is defined but never used.","'boardImages' is defined but never used.","React Hook useEffect has a missing dependency: 'squareNumber'. Either include it or remove the dependency array.",["149"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'image', 'selectedCharacter', and 'squareNumber'. Either include them or remove the dependency array.",["150"],"'refresh' is assigned a value but never used.","'setRefresh' is assigned a value but never used.","'useEffect' is defined but never used.","'movedCharacters' is assigned a value but never used.","'setMovedCharacters' is assigned a value but never used.","'handleSelectCharacter' is assigned a value but never used.","'handleEndMovementPhase' is assigned a value but never used.","'tempEnemyCharacters' is assigned a value but never used.","'numberOfMovesRequired' is assigned a value but never used.","'indexOfClosestAttackablePosition' is assigned a value but never used.","'attackedCharacters' is assigned a value but never used.","'setAttackedCharacters' is assigned a value but never used.","'handleEndAttackPhase' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},"Update the dependencies array to be: [currentPhase, enemy1, enemy2, enemy3, enemyCharacters, playerCharacters]",{"range":"159","text":"160"},"Update the dependencies array to be: [playerCharacters, selectedCharacter]",{"range":"161","text":"162"},"Update the dependencies array to be: [playerCharacters, enemyCharacters, squareNumber]",{"range":"163","text":"164"},"Update the dependencies array to be: [movableSquares, attackableSquares, selectedCharacter, image, squareNumber]",{"range":"165","text":"166"},[4866,4880],"[currentPhase, enemy1, enemy2, enemy3, enemyCharacters, playerCharacters]",[1422,1441],"[playerCharacters, selectedCharacter]",[4151,4186],"[playerCharacters, enemyCharacters, squareNumber]",[5088,5123],"[movableSquares, attackableSquares, selectedCharacter, image, squareNumber]"]