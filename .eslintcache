[{"/Users/chrisfraser/projects/react_RPG/react_rpg/src/index.js":"1","/Users/chrisfraser/projects/react_RPG/react_rpg/src/reportWebVitals.js":"2","/Users/chrisfraser/projects/react_RPG/react_rpg/src/App.js":"3","/Users/chrisfraser/projects/react_RPG/react_rpg/src/screens/GameScreen.js":"4","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameActionBar.js":"5","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameBoard.js":"6","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameSquare.js":"7","/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/boardImages.js":"8","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/MovementPhase.js":"9","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Character.js":"10","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Enemy.js":"11","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleePlayer.js":"12","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/meleeWeapon.js":"13","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleeWeapon.js":"14","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/AttackPhase.js":"15"},{"size":500,"mtime":1608752934000,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1608752934002,"results":"18","hashOfConfig":"17"},{"size":230,"mtime":1608770853174,"results":"19","hashOfConfig":"17"},{"size":11657,"mtime":1611259848843,"results":"20","hashOfConfig":"17"},{"size":2534,"mtime":1611192963189,"results":"21","hashOfConfig":"17"},{"size":3520,"mtime":1611185117232,"results":"22","hashOfConfig":"17"},{"size":11563,"mtime":1611255718753,"results":"23","hashOfConfig":"17"},{"size":128,"mtime":1586701404653,"results":"24","hashOfConfig":"17"},{"size":3372,"mtime":1611189916744,"results":"25","hashOfConfig":"17"},{"size":523,"mtime":1610655055397,"results":"26","hashOfConfig":"17"},{"size":11742,"mtime":1611266433033,"results":"27","hashOfConfig":"17"},{"size":1406,"mtime":1610655153713,"results":"28","hashOfConfig":"17"},{"size":154,"mtime":1610323315030,"results":"29","hashOfConfig":"17"},{"size":154,"mtime":1610323315030,"results":"30","hashOfConfig":"17"},{"size":2317,"mtime":1611024689525,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"13roori",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chrisfraser/projects/react_RPG/react_rpg/src/index.js",[],["66","67"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/reportWebVitals.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/App.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/screens/GameScreen.js",["68","69","70","71","72"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameActionBar.js",["73"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameBoard.js",["74"],"import React, { useState } from 'react';\nimport './GameBoard.css'\n// import { StyleSheet, Text, View, FlatList, Modal } from 'react-native';\n\nimport GameSquare from './GameSquare.js'\n\nconst GameBoard = ({ \n    // meleePosition, \n    // magicPosition, \n    // healerPosition, \n    // setMeleePosition, \n    // setMagicPosition, \n    // setHealerPosition, \n    selectedCharacter, \n    currentPhase, \n    movableSquares,\n    attackableSquares,\n    playerCharacters,\n    setPlayerCharacters,\n    enemyCharacters,\n    handleImageClick }) => {\n\n\n    const fillGameBoard = () => {\n\n        // const playerPositions = [magicPosition, meleePosition, healerPosition]\n        // console.log(playerPositions);\n        \n        const gameSquares = []\n        for ( let i = 1; i < 26; i++ ) {\n            gameSquares.push(<GameSquare \n                key={i} \n                // playerPositions={playerPositions} \n                squareNumber={i} \n                selectedCharacter={selectedCharacter}\n                movableSquares={movableSquares}\n                attackableSquares={attackableSquares}\n                // meleePosition={meleePosition}\n                // magicPosition={magicPosition}\n                // healerPosition={healerPosition}\n                // setMeleePosition={setMeleePosition}\n                // setMagicPosition={setMagicPosition}\n                // setHealerPosition={setHealerPosition}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                enemyCharacters={enemyCharacters}\n                handleImageClick={handleImageClick}\n            />)\n        }   \n        return gameSquares  \n    }\n\n    \n\n    return (\n        <div>\n        {/* <div style={styles.container}> */}\n\n            <p>GameBoard</p>\n            {/* <div style={styles.boardContainer}> */}\n            <div className=\"board-container\">\n                {fillGameBoard()}\n            </div>\n            {/* <Modal\n                // style={{height: 50, width: 50}}\n                // animationType=\"slide\"\n                transparent={true}\n                visible={false}\n                // onRequestClose={() => {\n                // Alert.alert(\"Modal has been closed.\");\n                // }}\n            >  \n                <View style={{\n                    flex: 1,\n                    flexDirection: 'column',\n                    backgroundColor: '#00000080',\n                    justifyContent: 'center',\n                    alignItems: 'center'}}>\n                    <View style={{\n                        width: 300,\n                        height: 500,\n                        backgroundColor: '#fff', \n                        padding: 20}}>\n                            \n                        <Text>Hi</Text>\n                    \n                    </View>\n                </View> */}\n                {/* <View style={{height: 70, width:50}}>\n                    <Text>Hi</Text>\n                </View> */}\n            {/* </Modal> */}\n\n        </div>\n    )\n\n}\n\n// const styles = StyleSheet.create({\n//     container: {\n//         // flex: 1,\n        \n\n//         // backgroundColor: '#fff',\n//         // alignItems: 'center',\n//         // justifyContent: 'center',\n//     },\n//     boardContainer: {\n//         flexDirection: 'row',\n//         flexWrap: 'wrap',\n//         maxWidth: 425,\n//         // backgroundColor: '#fff',\n//         // alignItems: 'center',\n//         // justifyContent: 'center',\n//     },\n// });\n\nexport default GameBoard","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameSquare.js",["75","76","77","78","79","80","81"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/boardImages.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/MovementPhase.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Character.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Enemy.js",["82","83","84"],"import Character from './Character.js'\n\nfunction Enemy(name, attackPoints, healthPoints, position) {\n    Character.call(this, name, attackPoints, healthPoints, position)\n\n    // this.statusEffects = []\n}\n\nEnemy.prototype = Object.create(Character.prototype);\nObject.defineProperty(Enemy.prototype, 'constructor', { \n    value: Enemy, \n    enumerable: false, // so that it does not appear in 'for in' loop\n    writable: true \n});\n\nconst boardHeight = 5\nconst boardWidth = 5\n\nEnemy.prototype.move = function (playerCharacters, enemyCharacters, setEnemyCharacters){\n\n    const playerCharacterPositions = getPlayerPositions(playerCharacters)\n    let enemyCharacterPositions = getEnemyPositions(enemyCharacters)\n    enemyCharacterPositions = enemyCharacterPositions.filter(item => item !== enemyCharacters[this.name].position)\n    const allCharacterPositions = [...playerCharacterPositions, ...enemyCharacterPositions]\n    // checks, can delete these when done!!!!\n    console.log(\"player positions in enemy\", playerCharacterPositions)\n    console.log(\"enemy positions in enemy\", enemyCharacterPositions)\n    console.log(\"all positions in enemy\", allCharacterPositions)\n\n    const attackablePositions = getAttackablePositions(playerCharacterPositions, allCharacterPositions)\n    console.log(\"attackable positions = \", attackablePositions)\n\n    const numberOfMovesToEachAttackablePosition = getNumberOfMovesToEachAttackablePosition(attackablePositions, enemyCharacters[this.name].position)\n    console.log(\"numberOfMovesToEachAttackablePosition\", numberOfMovesToEachAttackablePosition)\n\n    // const {indexOfClosestAttackablePosition, movesToClosestAttackablePosition} = getIndexOfClosestAttackablePosition(numberOfMovesToEachAttackablePosition)    \n    // console.log(\"indexOfClosestAttackablePosition\", indexOfClosestAttackablePosition)\n    // console.log(\"movesToClosestAttackablePosition\", movesToClosestAttackablePosition)\n\n    const moves = getIndexOfClosestAttackablePosition(numberOfMovesToEachAttackablePosition)\n    console.log(\"moves\", moves)\n\n    // This moves straight to closest attack point!!!\n    // let newPosition = this.position\n    // if ( movesToClosestAttackablePosition <= 3) this.position = attackablePositions[indexOfClosestAttackablePosition]\n    // return newPosition\n    // return this\n\n\n\n    // TAKE THIS OUT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // const enemy1 = new Enemy(\"orc1\", 1, 100, 1)\n    // const enemy2 = new Enemy(\"orc2\", 1, 100, 3)\n    // const enemy3 = new Enemy(\"orc3\", 1, 100, 5)\n\n    // let startingEnemyCharacters = {\n    //     enemy1: enemy1,\n    //     enemy2: enemy2,\n    //     enemy3: enemy3\n    // }\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n    // const moves = [-1, -5, 5]\n    // console.log(\"this\", this.name)\n    let finalPosition = this.position\n    let tempEnemyCharacters = null\n    if(moves.length <=3 ){\n        moves.forEach((move, index) => {\n            setTimeout(() => {\n                // this.position += move\n                // enemyCharacters[this.name].position += move\n                // tempEnemyCharacters = JSON.parse(JSON.stringify(enemyCharacters))\n                // setEnemyCharacters(tempEnemyCharacters)\n\n                const updatableEnemy = enemyCharacters[this.name]\n                updatableEnemy.position += move\n                finalPosition += move\n                setEnemyCharacters(prevState => ({...prevState, [this.name]: updatableEnemy}))\n            }, 1000 * (index + 1))\n        })\n    }\n    // // this is trying to get to attack!!!!!!!!!\n    // this.attack(playerCharacters.meleePlayer)\n    // console.log(\"POSITION\", finalPosition)\n\n    // // if(playerCharacters.meleePlayer.position)\n    finalPosition = enemyCharacters[this.name].position + moves.reduce((accumulator, currentValue) => accumulator + currentValue, 0)\n    console.log(\"this POSITION\", enemyCharacters[this.name].position)\n    console.log(enemyCharacters);\n    console.log(\"POSITION\", finalPosition)\n    \n    const currentRow = Math.ceil(enemyCharacters[this.name].position / boardWidth)\n    const meleePlayerRow = Math.ceil(playerCharacters.meleePlayer.position / boardWidth)\n    const magicPlayerRow = Math.ceil(playerCharacters.magicPlayer.position / boardWidth)\n    const healerPlayerRow = Math.ceil(playerCharacters.healerPlayer.position / boardWidth)\n\n    if((playerCharacters.meleePlayer.position === finalPosition + 1 && currentRow === meleePlayerRow) || \n        (playerCharacters.meleePlayer.position === finalPosition - 1 && currentRow === meleePlayerRow) ||\n        playerCharacters.meleePlayer.position === finalPosition + 5 ||\n        playerCharacters.meleePlayer.position === finalPosition - 5 ) {\n            setTimeout(() => { \n                this.attack(playerCharacters.meleePlayer)\n            }, 1000 * moves.length)\n        }\n    else if((playerCharacters.magicPlayer.position === finalPosition + 1 && currentRow === magicPlayerRow) || \n        (playerCharacters.magicPlayer.position === finalPosition - 1 && currentRow === magicPlayerRow) ||\n        playerCharacters.magicPlayer.position === finalPosition + 5 ||\n        playerCharacters.magicPlayer.position === finalPosition - 5 ) {\n            setTimeout(() => { \n                this.attack(playerCharacters.magicPlayer)\n            }, 1000 * moves.length)\n        }\n    else if((playerCharacters.healerPlayer.position === finalPosition + 1 && currentRow === healerPlayerRow) || \n        (playerCharacters.healerPlayer.position === finalPosition - 1 && currentRow === healerPlayerRow )||\n        playerCharacters.healerPlayer.position === finalPosition + 5 ||\n        playerCharacters.healerPlayer.position === finalPosition - 5 ) {\n            setTimeout(() => { \n                this.attack(playerCharacters.healerPlayer)\n            }, 1000 * moves.length)\n        }\n\n\n        //need this!!!!!!!!!!!!\n    return moves.length * 1000\n    \n\n\n\n\n    // setEnemyCharacters(startingEnemyCharacters)\n\n    // let tempEnemyCharacters = null\n    // setTimeout(() => {\n    //     tempEnemyCharacters = JSON.parse(JSON.stringify(enemyCharacters))\n    //     setEnemyCharacters(tempEnemyCharacters)\n    // }, 1000)\n\n}\n\nconst getPlayerPositions = (playerCharacters) => {\n    const playerPositions = []\n    playerPositions.push(playerCharacters.meleePlayer.position)\n    playerPositions.push(playerCharacters.magicPlayer.position)\n    playerPositions.push(playerCharacters.healerPlayer.position)\n    return playerPositions\n}\n\nconst getEnemyPositions = (enemyCharacters) => {\n    const enemyPositions = []\n    enemyPositions.push(enemyCharacters.enemy1.position)\n    enemyPositions.push(enemyCharacters.enemy2.position)\n    enemyPositions.push(enemyCharacters.enemy3.position)\n    return enemyPositions\n\n}\n\nconst getAttackablePositions = (playerCharacterPositions, allCharacterPositions) => {\n    const attackablePositions = []\n    playerCharacterPositions.forEach(playerCharacterPosition => {\n        const currentRow = Math.ceil(playerCharacterPosition / boardWidth)\n        if ((playerCharacterPosition + boardWidth) < (boardHeight * boardWidth) && !allCharacterPositions.includes(playerCharacterPosition + boardWidth) && !attackablePositions.includes(playerCharacterPosition + boardWidth)) attackablePositions.push(playerCharacterPosition + boardWidth)\n        if ((playerCharacterPosition - boardWidth) > 0 && !allCharacterPositions.includes(playerCharacterPosition - boardWidth) && !attackablePositions.includes(playerCharacterPosition - boardWidth)) attackablePositions.push(playerCharacterPosition - boardWidth)\n        const nextSquareRow = Math.ceil(((playerCharacterPosition + 1) / boardWidth))\n        if ( nextSquareRow === currentRow && !allCharacterPositions.includes(playerCharacterPosition + 1) && !attackablePositions.includes(playerCharacterPosition + 1)) attackablePositions.push(playerCharacterPosition + 1)\n        const previousSquareRow = Math.ceil(((playerCharacterPosition - 1) / boardWidth))\n        if ( previousSquareRow === currentRow && !allCharacterPositions.includes(playerCharacterPosition - 1) && !attackablePositions.includes(playerCharacterPosition - 1)) attackablePositions.push(playerCharacterPosition - 1)\n    })\n    return attackablePositions\n}\n\nconst getNumberOfMovesToEachAttackablePosition = (attackablePositions, currentPosition) => {\n    const numberOfMovesToEachAttackablePosition = attackablePositions.map((attackablePosition) => {\n        const enemyRow = Math.ceil(currentPosition / boardWidth)\n        const attackablePositionRow = Math.ceil(attackablePosition / boardWidth)\n        const rowDifference = Math.abs(enemyRow - attackablePositionRow)\n        let adjustedEnemyPosition = currentPosition\n        if ( attackablePosition < currentPosition) adjustedEnemyPosition = currentPosition - boardWidth * rowDifference\n        else if ( attackablePosition > currentPosition) adjustedEnemyPosition = currentPosition + boardWidth * rowDifference\n        const numberOfMovesRequired = Math.abs(adjustedEnemyPosition - attackablePosition) + rowDifference\n        \n        // GETTING PATH BIT!!!!!!!\n        let movementPath = []\n\n        const rowws = enemyRow - attackablePositionRow\n        console.log(\"rowws\", rowws)\n\n        // if ( rowws < 0 ) movementPath = [...movementPath, Array(Math.abs(rowws)).fill(-5)]\n        // else if(rowws > 0) movementPath = [...movementPath, Array(Math.abs(rowws)).fill(5)]\n\n        if ( rowws < 0 ) movementPath = [...Array(Math.abs(rowws)).fill(5)]\n        else if(rowws > 0) movementPath = [...Array(Math.abs(rowws)).fill(-5)]\n        \n        console.log(\"movementPath1\", movementPath)\n\n\n        const cols = adjustedEnemyPosition - attackablePosition\n        if ( cols < 0 ) movementPath = [...movementPath, ...Array(Math.abs(cols)).fill(1)]\n        else if(cols > 0) movementPath = [...movementPath, ...Array(Math.abs(cols)).fill(-1)]\n        console.log(\"cols\", cols)\n        console.log(\"movementPath2\", movementPath)\n\n        //TO HERE!!!!!!!!!!!!\n        \n        // return numberOfMovesRequired\n        return movementPath\n    })\n    console.log(\"numberOfMovesToEachAttackablePosition\", numberOfMovesToEachAttackablePosition)\n    return numberOfMovesToEachAttackablePosition\n}\n\nconst getIndexOfClosestAttackablePosition = (numberOfMovesToEachAttackablePosition) => {\n    // let indexOfClosestAttackablePosition = null\n    // let movesToClosestAttackablePosition = 100\n    // numberOfMovesToEachAttackablePosition.forEach((movesToAttackablePosition, index) =>{\n    //     if (movesToAttackablePosition < movesToClosestAttackablePosition){\n    //         movesToClosestAttackablePosition = movesToAttackablePosition\n    //         indexOfClosestAttackablePosition = index\n    //     }\n    // })\n    // return {\n    //     indexOfClosestAttackablePosition: indexOfClosestAttackablePosition , \n    //     movesToClosestAttackablePosition: movesToClosestAttackablePosition\n    // }\n    let indexOfClosestAttackablePosition = null\n    let movesToClosestAttackablePosition = numberOfMovesToEachAttackablePosition[0]\n    numberOfMovesToEachAttackablePosition.forEach((movesToAttackablePosition, index) =>{\n        if (movesToAttackablePosition.length < movesToClosestAttackablePosition.length){\n            movesToClosestAttackablePosition = movesToAttackablePosition\n            indexOfClosestAttackablePosition = index\n        }\n    })\n    // return {\n    //     indexOfClosestAttackablePosition: indexOfClosestAttackablePosition , \n    //     movesToClosestAttackablePosition: movesToClosestAttackablePosition\n    // }\n    return movesToClosestAttackablePosition\n}\n\nEnemy.prototype.attackClosestPlayer = function (){\n    // console.log(\"POSITION\", this.position)\n}\n\nexport default Enemy","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleePlayer.js",["85"],"import Character from './Character.js'\n\nfunction MeleePlayer(name, attackPoints, healthPoints, position, type) {\n    Character.call(this, name, attackPoints, healthPoints, position)\n    this.type = type\n    this.equipedWeapon  = null\n    this.weapons = []\n    this.ultimateCharge = 0\n\n    // this.statusEffects = []\n}\n\nMeleePlayer.prototype = Object.create(Character.prototype);\nObject.defineProperty(MeleePlayer.prototype, 'constructor', { \n    value: MeleePlayer, \n    enumerable: false, // so that it does not appear in 'for in' loop\n    writable: true \n});\n\nMeleePlayer.prototype.attack = function (enemy){\n    let damageDone = this.attackPoints\n    const startingHealth = enemy.healthPoints;\n\n    if(this.equipedWeapon) {\n        damageDone += this.equipedWeapon.attackPower\n        const randomNumber = Math.floor(Math.random() * 100) + 1\n        switch(this.equipedWeapon.type){\n            case(\"sword\"):\n                if(randomNumber <= 25) damageDone *= 2\n                break\n            case(\"axe\"):\n                if(randomNumber <= 10) damageDone = startingHealth\n                else if(randomNumber <= 20) enemy.statusEffects.push(\"attack down\")\n                break\n            case(\"club\"):\n                if(randomNumber <= 25) enemy.statusEffects.push(\"stun\")\n                break\n        }\n    }\n    enemy.healthPoints = startingHealth - damageDone\n}\n\nexport default MeleePlayer","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/meleeWeapon.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleeWeapon.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/AttackPhase.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":16},{"ruleId":"90","severity":1,"message":"94","line":27,"column":15,"nodeType":"92","messageId":"93","endLine":27,"endColumn":18},{"ruleId":"90","severity":1,"message":"95","line":29,"column":15,"nodeType":"92","messageId":"93","endLine":29,"endColumn":20},{"ruleId":"90","severity":1,"message":"96","line":30,"column":15,"nodeType":"92","messageId":"93","endLine":30,"endColumn":19},{"ruleId":"97","severity":1,"message":"98","line":110,"column":8,"nodeType":"99","endLine":110,"endColumn":22,"suggestions":"100"},{"ruleId":"90","severity":1,"message":"101","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"101","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"102","line":1,"column":38,"nodeType":"92","messageId":"93","endLine":1,"endColumn":44},{"ruleId":"90","severity":1,"message":"103","line":15,"column":8,"nodeType":"92","messageId":"93","endLine":15,"endColumn":19},{"ruleId":"97","severity":1,"message":"104","line":123,"column":8,"nodeType":"99","endLine":123,"endColumn":43,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":134,"column":9,"nodeType":"108","messageId":"109","endLine":144,"endColumn":10},{"ruleId":"97","severity":1,"message":"110","line":152,"column":8,"nodeType":"99","endLine":152,"endColumn":43,"suggestions":"111"},{"ruleId":"90","severity":1,"message":"112","line":154,"column":13,"nodeType":"92","messageId":"93","endLine":154,"endColumn":20},{"ruleId":"90","severity":1,"message":"113","line":154,"column":22,"nodeType":"92","messageId":"93","endLine":154,"endColumn":32},{"ruleId":"90","severity":1,"message":"114","line":66,"column":9,"nodeType":"92","messageId":"93","endLine":66,"endColumn":28},{"ruleId":"90","severity":1,"message":"115","line":179,"column":15,"nodeType":"92","messageId":"93","endLine":179,"endColumn":36},{"ruleId":"90","severity":1,"message":"116","line":229,"column":13,"nodeType":"92","messageId":"93","endLine":229,"endColumn":45},{"ruleId":"106","severity":1,"message":"107","line":27,"column":9,"nodeType":"108","messageId":"109","endLine":38,"endColumn":10},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'bob' is assigned a value but never used.","'karen' is assigned a value but never used.","'club' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'enemy1', 'enemy2', 'enemy3', 'enemyCharacters', and 'playerCharacters'. Either include them or remove the dependency array.","ArrayExpression",["119"],"'useState' is defined but never used.","'useRef' is defined but never used.","'boardImages' is defined but never used.","React Hook useEffect has missing dependencies: 'character' and 'squareNumber'. Either include them or remove the dependency array.",["120"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'image', 'selectedCharacter', and 'squareNumber'. Either include them or remove the dependency array.",["121"],"'refresh' is assigned a value but never used.","'setRefresh' is assigned a value but never used.","'tempEnemyCharacters' is assigned a value but never used.","'numberOfMovesRequired' is assigned a value but never used.","'indexOfClosestAttackablePosition' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},"Update the dependencies array to be: [currentPhase, enemy1, enemy2, enemy3, enemyCharacters, playerCharacters]",{"range":"128","text":"129"},"Update the dependencies array to be: [playerCharacters, enemyCharacters, squareNumber, character]",{"range":"130","text":"131"},"Update the dependencies array to be: [movableSquares, attackableSquares, selectedCharacter, image, squareNumber]",{"range":"132","text":"133"},[4551,4565],"[currentPhase, enemy1, enemy2, enemy3, enemyCharacters, playerCharacters]",[3986,4021],"[playerCharacters, enemyCharacters, squareNumber, character]",[4923,4958],"[movableSquares, attackableSquares, selectedCharacter, image, squareNumber]"]