[{"/Users/chrisfraser/projects/react_RPG/react_rpg/src/index.js":"1","/Users/chrisfraser/projects/react_RPG/react_rpg/src/reportWebVitals.js":"2","/Users/chrisfraser/projects/react_RPG/react_rpg/src/App.js":"3","/Users/chrisfraser/projects/react_RPG/react_rpg/src/screens/GameScreen.js":"4","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameActionBar.js":"5","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameBoard.js":"6","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameSquare.js":"7","/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/boardImages.js":"8","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/MovementPhase.js":"9","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Character.js":"10","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Enemy.js":"11","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleePlayer.js":"12","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/meleeWeapon.js":"13","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleeWeapon.js":"14","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/AttackPhase.js":"15","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/CharacterTurnSelect.js":"16","/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/WeaponImages.js":"17","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Spell.js":"18","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/HealerPlayer.js":"19","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MagicPlayer.js":"20","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/EquipModal.js":"21","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Heal.js":"22","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/CharacterInfoModal.js":"23"},{"size":500,"mtime":1608752934000,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1608752934002,"results":"26","hashOfConfig":"25"},{"size":230,"mtime":1608770853174,"results":"27","hashOfConfig":"25"},{"size":9985,"mtime":1613169830048,"results":"28","hashOfConfig":"25"},{"size":3877,"mtime":1612820758900,"results":"29","hashOfConfig":"25"},{"size":1757,"mtime":1612895798642,"results":"30","hashOfConfig":"25"},{"size":8596,"mtime":1612895818444,"results":"31","hashOfConfig":"25"},{"size":128,"mtime":1586701404653,"results":"32","hashOfConfig":"25"},{"size":1436,"mtime":1611419845025,"results":"33","hashOfConfig":"25"},{"size":6399,"mtime":1613170723978,"results":"34","hashOfConfig":"25"},{"size":12765,"mtime":1613168040125,"results":"35","hashOfConfig":"25"},{"size":2710,"mtime":1612840970099,"results":"36","hashOfConfig":"25"},{"size":154,"mtime":1610323315030,"results":"37","hashOfConfig":"25"},{"size":1046,"mtime":1612485191997,"results":"38","hashOfConfig":"25"},{"size":5614,"mtime":1612378726965,"results":"39","hashOfConfig":"25"},{"size":1606,"mtime":1612822003127,"results":"40","hashOfConfig":"25"},{"size":166,"mtime":1611517570117,"results":"41","hashOfConfig":"25"},{"size":277,"mtime":1612483278790,"results":"42","hashOfConfig":"25"},{"size":1224,"mtime":1613166848782,"results":"43","hashOfConfig":"25"},{"size":2878,"mtime":1612838504579,"results":"44","hashOfConfig":"25"},{"size":4360,"mtime":1612483278790,"results":"45","hashOfConfig":"25"},{"size":209,"mtime":1612483278790,"results":"46","hashOfConfig":"25"},{"size":2787,"mtime":1613162360510,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"13roori",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/chrisfraser/projects/react_RPG/react_rpg/src/index.js",[],["106","107"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/reportWebVitals.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/App.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/screens/GameScreen.js",["108"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameActionBar.js",["109","110"],"import React, { useState, useEffect, useRef } from 'react';\nimport './GameActionBar.css'\nimport CharacterTurnSelect from './CharacterTurnSelect.js'\nimport MovementPhase from './MovementPhase.js'\nimport AttackPhase from './AttackPhase.js'\n\n\nconst GameActionBar = ( { \n    selectedCharacter,\n    setSelectedCharacter, \n    currentPhase, \n    setCurrentPhase, \n    calculateMovementLocations, \n    calculateAttackLocations,\n    setMovableSquares, \n    setAttackableSquares,\n    playerCharacters, \n    setPlayerCharacters,\n    // enemyMovementPhase,\n    setEnemyMovementPhase,\n    usedCharacters,\n    setUsedCharacters} ) =>{\n\n    // testing\n    const testBox = useRef()\n    const test = () => {\n        const element = document.getElementById(\"testBox\")\n        element.classList.toggle(\"transform\")\n        // element.classList.add(\"transform\")\n        \n        testBox.current.classList.toggle(\"transform\")\n        testBox.current.classList.toggle(\"right\")\n        console.log(testBox)\n        // Both of the above do the same thing BUT using REF is the correct react way of doing it\n    }\n    // end of testing\n\n    const startingPosition = useRef(null)\n    // this didnt need to be useRef, also work with state\n    // const [ startingPosition, setStartingPosition ] = useState(null)\n\n    useEffect(() =>{\n        if(selectedCharacter) startingPosition.current = playerCharacters[selectedCharacter][\"position\"]\n    }, [selectedCharacter])\n\n    return (\n        <div>\n            <p>GameActionBar</p>\n            {currentPhase === \"characterTurnSelect\" && <CharacterTurnSelect\n                playerCharacters={playerCharacters} \n                setSelectedCharacter={setSelectedCharacter}\n                usedCharacters={usedCharacters}\n                setUsedCharacters={setUsedCharacters}\n                setCurrentPhase={setCurrentPhase}\n                calculateMovementLocations={calculateMovementLocations}\n            />}\n            {currentPhase === \"playerMovement\" && <MovementPhase \n                selectedCharacter={selectedCharacter}\n                setSelectedCharacter={setSelectedCharacter}\n                setCurrentPhase={setCurrentPhase}\n                calculateMovementLocations={calculateMovementLocations}\n                setMovableSquares={setMovableSquares}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                setEnemyMovementPhase={setEnemyMovementPhase}\n                calculateAttackLocations={calculateAttackLocations}\n                startingPosition={startingPosition}\n            />}\n            {currentPhase === \"enemyMovement\" && \n                <div>\n                    <h1>Enemy Movement Phase</h1>\n                    <p>Please Wait...</p>\n                </div>\n            }\n            {currentPhase === \"playerAttack\" && <AttackPhase \n                selectedCharacter={selectedCharacter}\n                setSelectedCharacter={setSelectedCharacter}\n                setCurrentPhase={setCurrentPhase}\n                calculateAttackLocations={calculateAttackLocations}\n                calculateMovementLocations={calculateMovementLocations}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                setAttackableSquares={setAttackableSquares}\n                startingPosition={startingPosition}\n                usedCharacters={usedCharacters}\n                setUsedCharacters={setUsedCharacters}\n            />}\n\n            {/* testing  */}\n            <div id=\"testBox\" className=\"box transform\" onClick={() => test()}></div>\n            <div className=\"box\" ref={testBox} onClick={() => test()}></div>\n            <input type=\"button\" id=\"button\" value=\"Click Me\" onClick={() => test()}></input>\n            {/* end of testing  */}\n\n        </div>\n    )\n}\n\n\nexport default GameActionBar","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameBoard.js",["111"],"import React, { useState } from 'react';\nimport './GameBoard.css'\n\nimport GameSquare from './GameSquare.js'\n\nconst GameBoard = ({ \n    selectedCharacter,\n    setSelectedCharacter,\n    currentPhase, \n    setCurrentPhase,\n    movableSquares,\n    attackableSquares,\n    playerCharacters,\n    setPlayerCharacters,\n    enemyCharacters,\n    setEnemyCharacters,\n    handleImageClick,\n    usedCharacters,\n    setUsedCharacters,\n    setAttackableSquares,\n    displayStatusEffects }) => {\n\n\n    const fillGameBoard = () => {\n\n        const gameSquares = []\n        for ( let i = 1; i < 26; i++ ) {\n            gameSquares.push(<GameSquare \n                key={i} \n                squareNumber={i} \n                currentPhase={currentPhase}\n                setCurrentPhase={setCurrentPhase}\n                selectedCharacter={selectedCharacter}\n                setSelectedCharacter={setSelectedCharacter}\n                movableSquares={movableSquares}\n                attackableSquares={attackableSquares}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                enemyCharacters={enemyCharacters}\n                setEnemyCharacters={setEnemyCharacters}\n                handleImageClick={handleImageClick}\n                usedCharacters={usedCharacters}\n                setUsedCharacters={setUsedCharacters}\n                setAttackableSquares={setAttackableSquares}\n                displayStatusEffects={displayStatusEffects}\n            />)\n        }   \n        return gameSquares  \n    }\n\n    return (\n        <div>\n            <p>GameBoard</p>\n            <div className=\"board-container\">\n                {fillGameBoard()}\n            </div>\n        </div>\n    )\n}\n\nexport default GameBoard","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameSquare.js",["112","113","114","115","116","117"],"import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom'\nimport Modal from 'react-modal'\nimport './GameSquare.css'\nimport CharacterInfoModal from '../components/CharacterInfoModal.js'\nimport mageImage from '../assets/mage.png'\nimport knightImage from '../assets/knight.png'\nimport healerImage from '../assets/healer.png'\nimport orcImage from '../assets/orc.png'\n\n// import boardImages from '../assets/boardImages'\n\nconst width = window.innerWidth\n\n\nconst GameSquare = ({ \n    squareNumber, \n    currentPhase,\n    setCurrentPhase,\n    movableSquares, \n    attackableSquares,\n    selectedCharacter,\n    setSelectedCharacter,\n    playerCharacters,\n    setPlayerCharacters,\n    enemyCharacters,\n    setEnemyCharacters,\n    handleImageClick,\n    usedCharacters,\n    setUsedCharacters,\n    setAttackableSquares,\n    displayStatusEffects\n }) =>{\n\n    const [ image, setImage ] = useState(null)\n    const [ squareStyling, setSquareStyling ] = useState(\"\")\n    const [ character, setCharacter ] = useState(null)\n    const [ modalIsOpen, setModalIsOpen ] = useState(false)\n\n//test!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // const [ fing, setFing ] = useState(\"meleePlayer\")\n    // const meleeRef = useRef()\n    // const magicRef = useRef()\n    // const healerRef = useRef()\n    // const characterRef = useRef()\n\n    // const handleImageClick = (character) => {\n    //     meleeRef.current.classList.add(\"blah\")\n    // }\n\n    // let makeRef = meleeRef\n//test end here!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n    useEffect(() => {\n        if (playerCharacters[\"magicPlayer\"][\"position\"] === squareNumber) {\n            setCharacter(playerCharacters[\"magicPlayer\"])\n            setImage(mageImage)\n        } else if (playerCharacters[\"meleePlayer\"][\"position\"] === squareNumber) {\n            setCharacter(playerCharacters[\"meleePlayer\"])\n            setImage(knightImage)\n        } else if (playerCharacters[\"healerPlayer\"][\"position\"] === squareNumber) {\n            setCharacter(playerCharacters[\"healerPlayer\"])\n            setImage(healerImage) \n        } else {\n            setImage(null)\n        }\n        // since adding id this could now be a loop!!!!!!!!!!!.......\n        if (enemyCharacters[\"enemy1\"][\"position\"] === squareNumber){\n            setCharacter(enemyCharacters[\"enemy1\"])\n            setImage(orcImage)\n        } else if (enemyCharacters[\"enemy2\"][\"position\"] === squareNumber){\n            setCharacter(enemyCharacters[\"enemy2\"])\n            setImage(orcImage)\n        } else if (enemyCharacters[\"enemy3\"][\"position\"] === squareNumber){\n            setCharacter(enemyCharacters[\"enemy3\"])\n            setImage(orcImage)\n        } \n    }, [playerCharacters, enemyCharacters])\n\n    useEffect(() => {\n        let currentImage = null\n        switch (selectedCharacter) {\n            case \"meleePlayer\":\n                currentImage = knightImage\n                break\n            case \"magicPlayer\":\n                currentImage = mageImage\n                break\n            case \"healerPlayer\":\n                currentImage = healerImage\n                break\n        }\n        if (( image === null || image === currentImage ) && movableSquares.includes(squareNumber) ) {\n            setSquareStyling(\"movable\")\n        } else if ( attackableSquares.includes(squareNumber) && selectedCharacter === \"healerPlayer\" && \n        playerCharacters[\"healerPlayer\"][\"equippedHeal\"] !== null ){\n            if ( !(enemyCharacters[\"enemy1\"][\"position\"] === squareNumber || \n                    enemyCharacters[\"enemy2\"][\"position\"] === squareNumber || \n                    enemyCharacters[\"enemy3\"][\"position\"] === squareNumber) \n            ) setSquareStyling(\"healable\")\n            else setSquareStyling(\"\")\n        } else if (attackableSquares.includes(squareNumber) && !(\n            playerCharacters[\"magicPlayer\"][\"position\"] === squareNumber ||\n            playerCharacters[\"healerPlayer\"][\"position\"] === squareNumber ||\n            playerCharacters[\"meleePlayer\"][\"position\"] === squareNumber )) {\n                // if (selectedCharacter === \"healerPlayer\" && playerCharacters[\"healerPlayer\"][\"equippedHeal\"] !== null) { \n                    setSquareStyling(\"attackable\")\n                // }\n        } else if ( attackableSquares.includes(squareNumber) && \n            ( selectedCharacter === \"healerPlayer\" && playerCharacters[\"healerPlayer\"][\"equippedHeal\"] === null)\n            && !(\n                playerCharacters[\"magicPlayer\"][\"position\"] === squareNumber ||\n                playerCharacters[\"healerPlayer\"][\"position\"] === squareNumber ||\n                playerCharacters[\"meleePlayer\"][\"position\"] === squareNumber )) {\n            setSquareStyling(\"attackable\")\n        } else {\n            setSquareStyling(\"\")\n        }\n        if (selectedCharacter === \"healerPlayer\" && \n            playerCharacters[\"healerPlayer\"][\"equippedHeal\"] !== null && \n            playerCharacters[\"healerPlayer\"][\"position\"] === squareNumber && \n            currentPhase === \"playerAttack\"){\n            setSquareStyling(\"healable\")\n        } \n    }, [movableSquares, attackableSquares, playerCharacters, currentPhase])\n\n\n    const handleClickSquare = () => {\n        if ( squareStyling === \"movable\"){\n            const updateableCharacter = playerCharacters[selectedCharacter]\n            updateableCharacter.position = squareNumber\n            setPlayerCharacters(prevState => ({...prevState, [selectedCharacter]: updateableCharacter }))\n        } else if ( squareStyling === \"attackable\" && image !== null) {\n            setModalIsOpen(true)\n        } else if ( squareStyling === \"healable\" && image !== null ){\n            setModalIsOpen(true)\n        }\n    }\n\n    const handleModalAttack = () => {\n        setModalIsOpen(false)\n        playerCharacters[selectedCharacter].attack(character, setEnemyCharacters)\n        setCurrentPhase(\"characterTurnSelect\")\n        setSelectedCharacter(null)\n        const updatedUsedCharacters = [...usedCharacters, selectedCharacter]\n        setUsedCharacters(updatedUsedCharacters)\n        setAttackableSquares([])\n    }\n\n\n    return (\n        <>\n            <div onClick={() => handleClickSquare()} className={width > 500 ? `bigger-square-container ${squareStyling}` : `smaller-square-container ${squareStyling}` }>\n                {image ? \n                    <img src={image} alt={image} className=\"game-square-image\" onClick={() => handleImageClick(character)}></img> \n                : \n                    <p>{squareNumber}</p>\n                    // <p></p>\n                }\n            </div>\n            {/* {character && selectedCharacter && <Modal\n                className=\"attack-modal-container\"\n                appElement={document.getElementById('root')}\n                isOpen={modalIsOpen}\n                style={{\n                    overlay: {\n                        backgroundColor: 'rgba(0,0,0,0.7)'\n                    }\n                }}\n                >\n                {playerCharacters[\"healerPlayer\"][\"equippedHeal\"] !== null ? <p>Heal {character.name} with {playerCharacters[\"healerPlayer\"][\"equippedHeal\"].name}</p> : \n                <p>Attack {character.name} with {playerCharacters[selectedCharacter].type}?</p>}\n                {selectedCharacter === \"meleePlayer\" && playerCharacters[selectedCharacter].equippedWeapon && <p>Current equipped Weapon is {playerCharacters[selectedCharacter].equippedWeapon.name}</p>}\n                {selectedCharacter === \"magicPlayer\" && playerCharacters[selectedCharacter].equippedSpell && <p>Current equipped Spell is {playerCharacters[selectedCharacter].equippedSpell.name}</p>}\n                {selectedCharacter === \"healerPlayer\" && playerCharacters[selectedCharacter].equippedHeal && <p>Current equipped heal is {playerCharacters[selectedCharacter].equippedHeal.name}</p>}\n                <p>This will end this characters turn</p>\n                <button onClick={() => handleModalAttack()}>Yes</button>\n                <button onClick={() => setModalIsOpen(false)}>No</button>\n            </Modal>} */}\n            \n            {character && selectedCharacter &&\n            <CharacterInfoModal\n                character={character}\n                modalIsOpen={modalIsOpen}\n                setModalIsOpen={setModalIsOpen}\n                playerCharacters={playerCharacters}\n                selectedCharacter={selectedCharacter}\n                handleModalAttack={handleModalAttack}\n                displayStatusEffects={displayStatusEffects}\n            />}\n        </>\n    )\n}\n\nexport default GameSquare\n\n","/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/boardImages.js",[],["118","119"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/MovementPhase.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Character.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Enemy.js",["120","121","122"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleePlayer.js",["123"],"import Character from './Character.js'\n\nfunction MeleePlayer(name, attackPoints, healthPoints, position, type) {\n    Character.call(this, name, attackPoints, healthPoints, position)\n    this.type = type\n    this.equippedWeapon  = null\n    this.weapons = []\n    this.ultimateCharge = 0\n    this.id = \"meleePlayer\"\n\n\n    // this.statusEffects = []\n}\n\nMeleePlayer.prototype = Object.create(Character.prototype);\nObject.defineProperty(MeleePlayer.prototype, 'constructor', { \n    value: MeleePlayer, \n    enumerable: false, // so that it does not appear in 'for in' loop\n    writable: true \n});\n\nMeleePlayer.prototype.attack = function (enemy, setEnemyCharacters){\n    let damageDone = this.attackPoints\n    const startingHealth = enemy.healthPoints;\n\n    if(this.equippedWeapon) {\n        damageDone += this.equippedWeapon.attackPower\n        const randomNumber = Math.floor(Math.random() * 100) + 1\n        switch(this.equippedWeapon.type){\n            case(\"sword\"):\n                if(randomNumber <= 25) damageDone *= 2\n                break\n            case(\"axe\"):\n                if(randomNumber <= 10) damageDone = startingHealth\n                // else if(randomNumber <= 100) addEffectToTarget(\"attack down\", enemy, 2) // should be <= 20\n                else if(randomNumber <= 100) Character.prototype.addEffectToTarget.call(this, this.equippedWeapon, enemy) // should be <= 20\n                break\n            case(\"club\"):\n                // if(randomNumber <= 100) addEffectToTarget(\"stun\", enemy, 1) // should be <= 25\n                if(randomNumber <= 100) Character.prototype.addEffectToTarget.call(this, this.equippedWeapon, enemy) // should be <= 25\n                break\n        }\n    }\n    // enemy.statusEffects.forEach(statusEffect => {\n    //     if(statusEffect.effect === \"armour down\" ) damageDone *= 2\n    // })\n    // enemy.healthPoints = startingHealth - damageDone\n    // if ( enemy.healthPoints <= 0) {\n    //     enemy.position = 100\n    //     setEnemyCharacters(prevState => ({...prevState, [enemy.id]: enemy }))   //here!\n    // }\n    Character.prototype.attack.call(this, enemy, setEnemyCharacters, damageDone)\n}\n\n// const addEffectToTarget = (effectName, enemy, duration) => {\n//     let stillToAdd = true\n//     const updatedEffects = enemy.statusEffects.map(statusEffect =>{\n//         if( effectName === statusEffect.effect){\n//             if(duration > statusEffect.duration) statusEffect.duration = duration\n//             stillToAdd = false\n//         }\n//         return statusEffect\n//     })\n//     if (stillToAdd) enemy.statusEffects.push({effect: effectName, duration: duration})\n//     else enemy.statusEffects = updatedEffects\n// }\n\nexport default MeleePlayer","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/meleeWeapon.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleeWeapon.js",["124"],"function MeleeWeapon(name, attackPower, type, effectName, activationChance){\n    this.name = name\n    this.attackPower = attackPower\n    this.type = type\n\n    let defaultEffect = null\n    let defaultActivationChance = null\n    let defaultDuration = null\n    switch (this.type) {\n        case \"axe\":\n            const randomNumber = Math.floor(Math.random() * 4)\n            randomNumber === 0 ? defaultEffect = \"instant kill\" : defaultEffect = \"attack down\"\n            defaultActivationChance = 20\n            defaultDuration = 10\n            break\n        case \"club\":\n            defaultEffect = \"stun\"\n            defaultActivationChance = 25\n            defaultDuration = 1\n            break\n        case \"sword\":\n            defaultEffect = \"pierce\"\n            defaultActivationChance = 25\n            defaultDuration = 0\n            break\n    }\n    \n    this.effectName = effectName || defaultEffect\n    this.activationChance = activationChance || defaultActivationChance\n    this.duration = defaultDuration\n\n}\n\nexport default MeleeWeapon","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/AttackPhase.js",["125","126","127","128","129","130","131"],"import React, { useState } from 'react';\nimport './AttackPhase.css'\nimport EquipModal from './EquipModal.js'\nimport ReactDOM from 'react-dom'\nimport Modal from 'react-modal'\n// import swordImage from '../assets/sword.png'\n// import WeaponImages from '../assets/WeaponImages.js'\n\nconst AttackPhase = ({ \n    selectedCharacter,\n    setSelectedCharacter, \n    setCurrentPhase, \n    calculateAttackLocations, \n    calculateMovementLocations,\n    setAttackableSquares,\n    playerCharacters, \n    setPlayerCharacters,\n    setEnemyMovementPhase,\n    startingPosition,\n    usedCharacters,\n    setUsedCharacters }) =>{\n\n    const [ weaponChangeModalIsOpen, setWeaponChangeModalIsOpen ] = useState(false)\n    const [ equipModalIsOpen, setEquipModalIsOpen ] = useState(false)\n\n    const [ equippedWeapon, setEquippedWeapon ] = useState(playerCharacters[selectedCharacter].equippedWeapon)\n\n    const handleFinishedCharacterAttack = () => {\n        setAttackableSquares([])\n        setCurrentPhase(\"characterTurnSelect\")\n        const updatedUsedCharacters = [...usedCharacters, selectedCharacter]\n        setUsedCharacters(updatedUsedCharacters)\n    }\n\n    const handleCancel = () => {\n        setCurrentPhase(\"playerMovement\")\n        calculateMovementLocations(startingPosition.current, 2)\n        setAttackableSquares([])\n    }\n\n    const handleChangeEquipped = () => {\n        // setWeaponChangeModalIsOpen(true)\n        setEquipModalIsOpen(true)\n    }\n\n\n    const displayWeaponInventory = () => {\n        const weapons = playerCharacters[selectedCharacter].weapons\n        const displayWeaponOptions = weapons.map(weapon => {\n            let equippedStyle = false\n            if(playerCharacters[selectedCharacter].equippedWeapon && playerCharacters[selectedCharacter].equippedWeapon.name === weapon.name) equippedStyle = true\n            return (\n                <div className={equippedStyle ? \"weapon-select-modal-weapon equippedStyle\" : \"weapon-select-modal-weapon\"} onClick={() => handleEquipWeapon(weapon)}>\n                    {/* <img src={swordImage} alt='sword' className=\"weapon-select-modal-image\"></img>  */}\n                    {/* <img src={WeaponImages[weapon.name].default} alt='sword' className=\"weapon-select-modal-image\"></img>  */}\n                    <p>{weapon.name}</p>\n                    <img src={require('../assets/' + weapon.name + '.png').default} alt={weapon.name} className=\"weapon-select-modal-image\"></img> \n                    <p>Damage: {weapon.attackPower}</p>\n                    {/* <button onClick={() => handleEquipWeapon(weapon)}>Equip</button> */}\n                </div>\n            )\n        })\n        return displayWeaponOptions\n    }\n\n    const handleEquipWeapon = (weapon) => {\n        const updateableCharacter = playerCharacters[selectedCharacter]\n        updateableCharacter.equippedWeapon = weapon\n        setPlayerCharacters(prevState => ({...prevState, [selectedCharacter]: updateableCharacter }))\n    }\n\n    return (\n        <div>\n            <p>Attack Phase</p>\n                <div>\n                    <p>Currently Attacking with {playerCharacters[selectedCharacter].type}</p> \n                    <button onClick={() => handleFinishedCharacterAttack()}>End {playerCharacters[selectedCharacter].type}'s turn without attacking </button>\n                    {selectedCharacter === \"meleePlayer\" && <button onClick={() => handleChangeEquipped()}>Change Equipped Weapon</button>}\n                    {selectedCharacter === \"magicPlayer\" && <button onClick={() => handleChangeEquipped()}>Change Equipped Spell</button>}\n                    {selectedCharacter === \"healerPlayer\" && <button onClick={() => handleChangeEquipped()}>Change Equipped Heal</button>}\n                    <button onClick={() => handleCancel()}>Back</button>\n                    <p>After finishing movement for this character it cannot be moved again until next movement phase, canceling doesn't use characters movement for this turn</p>\n                </div>\n            {console.log(\"equipmentType111111\", selectedCharacter)}\n\n                {selectedCharacter && <EquipModal \n                    equipModalIsOpen={equipModalIsOpen} \n                    setEquipModalIsOpen={setEquipModalIsOpen}\n                    playerCharacters={playerCharacters}\n                    setPlayerCharacters={setPlayerCharacters}\n                    selectedCharacter={selectedCharacter}\n                />}\n\n\n\n                {/* {selectedCharacter === \"meleePlayer\" && <Modal\n                className=\"weapon-select-modal-container\"\n                appElement={document.getElementById('root')}\n                isOpen={weaponChangeModalIsOpen}\n                style={{\n                    overlay: {\n                        backgroundColor: 'rgba(0,0,0,0.7)'\n                    }\n                }}\n                >\n                <p>Change Weapon</p>\n                {playerCharacters[selectedCharacter].equippedWeapon ? \n                    <p>Currently Equipped weapon {playerCharacters[selectedCharacter].equippedWeapon.name}</p>\n                :\n                    <p>No Weapon Currently Equipped</p>\n                }\n                <div className=\"weapon-select-modal-weapons-container\">\n                    {displayWeaponInventory()}\n                </div>\n                <button className=\"weapon-select-modal-button\" onClick={() => handleEquipWeapon(null)}>Unequip Weapon</button>\n                <button className=\"weapon-select-modal-button\" onClick={() => setWeaponChangeModalIsOpen(false)}>Confirm</button>\n            </Modal>} */}\n        </div>\n    )\n\n}\n\nexport default AttackPhase","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/CharacterTurnSelect.js",["132"],"import React, { useState } from 'react';\n\nconst CharacterTurnSelect = ({\n    playerCharacters,\n    setSelectedCharacter,\n    usedCharacters,\n    setUsedCharacters,\n    setCurrentPhase,\n    calculateMovementLocations }) => {\n\n\n    const handleSelectCharacter = (character) => {\n        setSelectedCharacter(character)\n        calculateMovementLocations(playerCharacters[character].position, 2)\n        setCurrentPhase(\"playerMovement\")\n    }\n\n    const classDeadAllyAsUsed = (deadAlly) => {\n        if (!usedCharacters.includes(deadAlly)) {\n            const newUsedCharacters = [...usedCharacters, deadAlly]\n            setUsedCharacters(newUsedCharacters)\n        }\n    }\n\n    return (\n        <div>\n            <p>Select a character to control...</p>\n            {playerCharacters[\"meleePlayer\"][\"healthPoints\"] > 0 ? <button disabled={usedCharacters.includes(\"meleePlayer\")} onClick={() => handleSelectCharacter(\"meleePlayer\")}>Knight</button> : classDeadAllyAsUsed(\"meleePlayer\")}\n            {playerCharacters[\"magicPlayer\"][\"healthPoints\"] > 0 ? <button disabled={usedCharacters.includes(\"magicPlayer\")} onClick={() => handleSelectCharacter(\"magicPlayer\")}>Mage</button> : classDeadAllyAsUsed(\"magicPlayer\")}\n            {playerCharacters[\"healerPlayer\"][\"healthPoints\"] > 0 ? <button disabled={usedCharacters.includes(\"healerPlayer\")} onClick={() => handleSelectCharacter(\"healerPlayer\")}>Healer</button> : classDeadAllyAsUsed(\"healerPlayer\")}\n            {/* <button onClick={() => handleEndMovementPhase()}>End Movement Phase</button> */}\n        </div>\n    )\n}\n\nexport default CharacterTurnSelect","/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/WeaponImages.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Spell.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/HealerPlayer.js",["133"],"import CharacterTurnSelect from '../components/CharacterTurnSelect.js'\nimport Character from './Character.js'\n\nfunction HealerPlayer(name, attackPoints, healthPoints, position, type) {\n    Character.call(this, name, attackPoints, healthPoints, position)\n    this.type = type\n    this.equippedHeal  = null\n    this.heals = []\n    this.ultimateCharge = 0\n    this.id = \"healerPlayer\"\n\n    // this.statusEffects = []\n}\n\nHealerPlayer.prototype = Object.create(Character.prototype);\nObject.defineProperty(HealerPlayer.prototype, 'constructor', { \n    value: HealerPlayer, \n    enumerable: false, // so that it does not appear in 'for in' loop\n    writable: true \n});\n\nHealerPlayer.prototype.attack = function (target, setEnemy){\n    if ( this.equippedHeal !== null ) {\n        const startingHealth = target.healthPoints\n        let newHealth = startingHealth + this.equippedHeal.healPower\n        if ( newHealth > target.maxHealthPoints) newHealth = target.maxHealthPoints\n        target.healthPoints = newHealth\n        if ( this.equippedHeal.effectName) Character.prototype.addEffectToTarget.call(this, this.equippedHeal, target)\n    } else Character.prototype.attack.call(this, target, setEnemy)\n}\n\nexport default HealerPlayer","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MagicPlayer.js",["134","135"],"import Character from './Character.js'\n\nfunction MagicPlayer(name, attackPoints, healthPoints, position, type) {\n    Character.call(this, name, attackPoints, healthPoints, position)\n    this.type = type\n    this.equippedSpell  = null\n    this.spells = []\n    this.ultimateCharge = 0\n    this.id = \"magicPlayer\"\n\n\n    // this.statusEffects = []\n}\n\nMagicPlayer.prototype = Object.create(Character.prototype);\nObject.defineProperty(MagicPlayer.prototype, 'constructor', { \n    value: MagicPlayer, \n    enumerable: false, // so that it does not appear in 'for in' loop\n    writable: true \n});\n\nMagicPlayer.prototype.attack = function (enemy, setEnemyCharacters) {\n    let damageDone = this.attackPoints\n    const startingHealth = enemy.healthPoints\n    if(this.equippedSpell) damageDone += this.equippedSpell.spellPower\n    const randomNumber = Math.floor(Math.random() * 100) + 1\n    // if ( randomNumber <= this.equippedSpell.activationChance) enemy.statusEffects.push({effect: this.equippedSpell.effectName, duration: this.equippedSpell.duration})\n    // enemy.statusEffects.forEach(statusEffect => {\n    //     if(statusEffect.effect === \"armour down\" ) damageDone *= 2\n    // })\n    // if ( randomNumber <= this.equippedSpell.activationChance) addEffectToTarget(this.equippedSpell, enemy)\n    let spellActivationChance = 0\n    this.equippedSpell ? spellActivationChance = this.equippedSpell.activationChance : spellActivationChance = 0\n    if ( randomNumber <= spellActivationChance) Character.prototype.addEffectToTarget.call(this, this.equippedSpell, enemy)\n    // enemy.healthPoints = startingHealth - damageDone\n    Character.prototype.attack.call(this, enemy, setEnemyCharacters, damageDone)\n\n}\n\n\nconst updateStatusEffects = (name, enemyCharacters, setEnemyCharacters) => {\n    const updatedStatusEffects = []\n    enemyCharacters[name].statusEffects.forEach(statusEffect => {\n        statusEffect.duration -= 1\n        if (statusEffect.duration > 0) updatedStatusEffects.push(statusEffect)\n    })\n    const updatableEnemy = enemyCharacters[name]\n    updatableEnemy.statusEffects = updatedStatusEffects\n    console.log(\"updatedStatusEffects\", updatedStatusEffects);\n    console.log(\"updatableEnemy\", updatableEnemy);\n    setEnemyCharacters(prevState => ({...prevState, [name]: updatableEnemy}))\n}\n\n// const addEffectToTarget = (spell, enemy) => {\n//     let stillToAdd = true\n//     const updatedEffects = enemy.statusEffects.map(statusEffect =>{\n//         if( spell.effectName === statusEffect.effect){\n//             if(spell.duration > statusEffect.duration) statusEffect.duration = spell.duration\n//             stillToAdd = false\n//         }\n//         return statusEffect\n//     })\n//     if (stillToAdd) enemy.statusEffects.push({effect: spell.effectName, duration: spell.duration})\n//     else enemy.statusEffects = updatedEffects\n// }\n\nexport default MagicPlayer","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/EquipModal.js",["136","137","138"],"import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom'\nimport Modal from 'react-modal'\n\nimport './AttackPhase.css'\n\n\n    \n    \nconst EquipModal = ({\n    equipModalIsOpen, \n    setEquipModalIsOpen, \n    playerCharacters,\n    setPlayerCharacters,\n    selectedCharacter}) => {\n\n    // const [ equipmentType, setEquipmentType ] = useState(\"\")\n    // useEffect(() =>{\n    //     console.log(\"selectedCharacter\", selectedCharacter);\n    //     if(selectedCharacter === \"meleePlayer\") setEquipmentType(\"Weapon\")\n    //     else if(selectedCharacter === \"magicPlayer\") setEquipmentType(\"Spell\")\n    //     else if(selectedCharacter === \"healerPlayer\") setEquipmentType(\"Heal\")\n    // }, selectedCharacter)\n\n\n    let equipmentType = \"\"\n    if(selectedCharacter === \"meleePlayer\") equipmentType = \"Weapon\"\n    else if(selectedCharacter === \"magicPlayer\") equipmentType= \"Spell\"\n    else if(selectedCharacter === \"healerPlayer\") equipmentType = \"Heal\"\n\n\n    const displayItemsInventory = () => {\n        let itemType = \"\"\n        if(selectedCharacter === \"meleePlayer\") itemType = \"weapons\"\n        else if(selectedCharacter === \"magicPlayer\") itemType= \"spells\"\n        else if(selectedCharacter === \"healerPlayer\") itemType = \"heals\"\n\n        const items = playerCharacters[selectedCharacter][itemType]\n        const displayItemOptions = items.map(item => {\n            let equippedStyle = false\n            if(playerCharacters[selectedCharacter][\"equipped\" + equipmentType] && playerCharacters[selectedCharacter][\"equipped\" + equipmentType].name === item.name) equippedStyle = true\n            return (\n                <div className={equippedStyle ? \"weapon-select-modal-weapon equippedStyle\" : \"weapon-select-modal-weapon\"} onClick={() => handleEquipItem(item)}>\n                    {/* <img src={swordImage} alt='sword' className=\"weapon-select-modal-image\"></img>  */}\n                    {/* <img src={WeaponImages[weapon.name].default} alt='sword' className=\"weapon-select-modal-image\"></img>  */}\n                    <p>{item.name}</p>\n                    <img src={require('../assets/' + item.name + '.png').default} alt={item.name} className=\"weapon-select-modal-image\"></img> \n                    { itemType === \"weapons\" && <p>Damage: {item.attackPower}</p>}\n                    { itemType === \"spells\" && <p>Damage: {item.spellPower}</p>}\n                    { itemType === \"spells\" && <p>Effect: {item.effectName} with {item.activationChance}% chance for {item.duration} turns</p>}\n                    {/* { itemType === \"heals\" && <p>Damage: {item.attackPower}</p>} */}\n                    {/* <button onClick={() => handleEquipItem(item)}>Equip</button> */}\n                </div>\n            )\n        })\n        return displayItemOptions\n    }\n\n    const handleEquipItem = (item) => {\n        const updateableCharacter = playerCharacters[selectedCharacter]\n        updateableCharacter[\"equipped\" + equipmentType] = item\n        setPlayerCharacters(prevState => ({...prevState, [selectedCharacter]: updateableCharacter }))\n    }\n    \n    return (\n        <>\n            {console.log(\"equipmentType\", selectedCharacter)}\n            {equipmentType && <Modal\n                className=\"weapon-select-modal-container\"\n                appElement={document.getElementById('root')}\n                isOpen={equipModalIsOpen}\n                style={{\n                    overlay: {\n                        backgroundColor: 'rgba(0,0,0,0.7)'\n                    }\n                }}\n                >\n                <p>Change {equipmentType}</p>\n                {playerCharacters[selectedCharacter][\"equipped\" + equipmentType] ? \n                    <p>Currently Equipped {equipmentType} {playerCharacters[selectedCharacter][\"equipped\" + equipmentType].name}</p>\n                :\n                    <p>No {equipmentType} Currently Equipped</p>\n                }\n                <div className=\"weapon-select-modal-weapons-container\">\n                    {displayItemsInventory()}\n                </div>\n                <button className=\"weapon-select-modal-button\" onClick={() => handleEquipItem(null)}>Unequip {equipmentType}</button>\n                <button className=\"weapon-select-modal-button\" onClick={() => setEquipModalIsOpen(false)}>Confirm</button>\n            </Modal>}\n        </>\n    )\n}\n\nexport default EquipModal","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Heal.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/CharacterInfoModal.js",["139","140","141"],{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":103,"column":8,"nodeType":"148","endLine":103,"endColumn":22,"suggestions":"149"},{"ruleId":"150","severity":1,"message":"151","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":25},{"ruleId":"146","severity":1,"message":"154","line":44,"column":8,"nodeType":"148","endLine":44,"endColumn":27,"suggestions":"155"},{"ruleId":"150","severity":1,"message":"151","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":25},{"ruleId":"150","severity":1,"message":"156","line":1,"column":38,"nodeType":"152","messageId":"153","endLine":1,"endColumn":44},{"ruleId":"150","severity":1,"message":"157","line":2,"column":8,"nodeType":"152","messageId":"153","endLine":2,"endColumn":16},{"ruleId":"150","severity":1,"message":"158","line":3,"column":8,"nodeType":"152","messageId":"153","endLine":3,"endColumn":13},{"ruleId":"146","severity":1,"message":"159","line":78,"column":8,"nodeType":"148","endLine":78,"endColumn":43,"suggestions":"160"},{"ruleId":"161","severity":1,"message":"162","line":82,"column":9,"nodeType":"163","messageId":"164","endLine":92,"endColumn":10},{"ruleId":"146","severity":1,"message":"165","line":125,"column":8,"nodeType":"148","endLine":125,"endColumn":75,"suggestions":"166"},{"ruleId":"142","replacedBy":"167"},{"ruleId":"144","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":101,"column":74,"nodeType":"171","messageId":"172","endLine":101,"endColumn":110,"fix":"173"},{"ruleId":"169","severity":1,"message":"174","line":116,"column":74,"nodeType":"171","messageId":"172","endLine":116,"endColumn":110,"fix":"175"},{"ruleId":"169","severity":1,"message":"176","line":130,"column":74,"nodeType":"171","messageId":"172","endLine":130,"endColumn":111,"fix":"177"},{"ruleId":"161","severity":1,"message":"162","line":29,"column":9,"nodeType":"163","messageId":"164","endLine":42,"endColumn":10},{"ruleId":"161","severity":1,"message":"162","line":9,"column":5,"nodeType":"163","messageId":"164","endLine":26,"endColumn":6},{"ruleId":"150","severity":1,"message":"157","line":4,"column":8,"nodeType":"152","messageId":"153","endLine":4,"endColumn":16},{"ruleId":"150","severity":1,"message":"158","line":5,"column":8,"nodeType":"152","messageId":"153","endLine":5,"endColumn":13},{"ruleId":"150","severity":1,"message":"178","line":23,"column":13,"nodeType":"152","messageId":"153","endLine":23,"endColumn":36},{"ruleId":"150","severity":1,"message":"179","line":23,"column":38,"nodeType":"152","messageId":"153","endLine":23,"endColumn":64},{"ruleId":"150","severity":1,"message":"180","line":26,"column":13,"nodeType":"152","messageId":"153","endLine":26,"endColumn":27},{"ruleId":"150","severity":1,"message":"181","line":26,"column":29,"nodeType":"152","messageId":"153","endLine":26,"endColumn":46},{"ruleId":"150","severity":1,"message":"182","line":47,"column":11,"nodeType":"152","messageId":"153","endLine":47,"endColumn":33},{"ruleId":"150","severity":1,"message":"151","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":25},{"ruleId":"150","severity":1,"message":"183","line":1,"column":8,"nodeType":"152","messageId":"153","endLine":1,"endColumn":27},{"ruleId":"150","severity":1,"message":"184","line":24,"column":11,"nodeType":"152","messageId":"153","endLine":24,"endColumn":25},{"ruleId":"150","severity":1,"message":"185","line":41,"column":7,"nodeType":"152","messageId":"153","endLine":41,"endColumn":26},{"ruleId":"150","severity":1,"message":"151","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":25},{"ruleId":"150","severity":1,"message":"186","line":1,"column":27,"nodeType":"152","messageId":"153","endLine":1,"endColumn":36},{"ruleId":"150","severity":1,"message":"157","line":2,"column":8,"nodeType":"152","messageId":"153","endLine":2,"endColumn":16},{"ruleId":"150","severity":1,"message":"151","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":25},{"ruleId":"150","severity":1,"message":"186","line":1,"column":27,"nodeType":"152","messageId":"153","endLine":1,"endColumn":36},{"ruleId":"150","severity":1,"message":"157","line":2,"column":8,"nodeType":"152","messageId":"153","endLine":2,"endColumn":16},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'enemy1', 'enemy2', 'enemy3', 'enemyCharacters', and 'playerCharacters'. Either include them or remove the dependency array.","ArrayExpression",["189"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'playerCharacters'. Either include it or remove the dependency array.",["190"],"'useRef' is defined but never used.","'ReactDOM' is defined but never used.","'Modal' is defined but never used.","React Hook useEffect has a missing dependency: 'squareNumber'. Either include it or remove the dependency array.",["191"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'enemyCharacters', 'image', 'selectedCharacter', and 'squareNumber'. Either include them or remove the dependency array.",["192"],["187"],["188"],"no-useless-computed-key","Unnecessarily computed property [\"meleePlayer\"] found.","Property","unnecessarilyComputedProperty",{"range":"193","text":"194"},"Unnecessarily computed property [\"magicPlayer\"] found.",{"range":"195","text":"196"},"Unnecessarily computed property [\"healerPlayer\"] found.",{"range":"197","text":"198"},"'weaponChangeModalIsOpen' is assigned a value but never used.","'setWeaponChangeModalIsOpen' is assigned a value but never used.","'equippedWeapon' is assigned a value but never used.","'setEquippedWeapon' is assigned a value but never used.","'displayWeaponInventory' is assigned a value but never used.","'CharacterTurnSelect' is defined but never used.","'startingHealth' is assigned a value but never used.","'updateStatusEffects' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},[5626,5641],"\"meleePlayer\"",[6613,6628],"\"magicPlayer\"",[7610,7626],"\"healerPlayer\"","Update the dependencies array to be: [currentPhase, enemy1, enemy2, enemy3, enemyCharacters, playerCharacters]",{"range":"207","text":"208"},"Update the dependencies array to be: [playerCharacters, selectedCharacter]",{"range":"209","text":"210"},"Update the dependencies array to be: [playerCharacters, enemyCharacters, squareNumber]",{"range":"211","text":"212"},"Update the dependencies array to be: [movableSquares, attackableSquares, playerCharacters, currentPhase, selectedCharacter, image, squareNumber, enemyCharacters]",{"range":"213","text":"214"},[4154,4168],"[currentPhase, enemy1, enemy2, enemy3, enemyCharacters, playerCharacters]",[1418,1437],"[playerCharacters, selectedCharacter]",[2712,2747],"[playerCharacters, enemyCharacters, squareNumber]",[5118,5185],"[movableSquares, attackableSquares, playerCharacters, currentPhase, selectedCharacter, image, squareNumber, enemyCharacters]"]