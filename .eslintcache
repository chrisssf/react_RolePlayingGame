[{"/Users/chrisfraser/projects/react_RPG/react_rpg/src/index.js":"1","/Users/chrisfraser/projects/react_RPG/react_rpg/src/reportWebVitals.js":"2","/Users/chrisfraser/projects/react_RPG/react_rpg/src/App.js":"3","/Users/chrisfraser/projects/react_RPG/react_rpg/src/screens/GameScreen.js":"4","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameActionBar.js":"5","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameBoard.js":"6","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameSquare.js":"7","/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/boardImages.js":"8","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/MovementPhase.js":"9","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Character.js":"10","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Enemy.js":"11","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleePlayer.js":"12","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/meleeWeapon.js":"13","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleeWeapon.js":"14","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/AttackPhase.js":"15","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/CharacterTurnSelect.js":"16","/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/WeaponImages.js":"17","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Spell.js":"18","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/HealerPlayer.js":"19","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MagicPlayer.js":"20","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/EquipModal.js":"21","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Heal.js":"22","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/CharacterInfoModal.js":"23"},{"size":500,"mtime":1608752934000,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1608752934002,"results":"26","hashOfConfig":"25"},{"size":447,"mtime":1620350849679,"results":"27","hashOfConfig":"25"},{"size":10562,"mtime":1620345782275,"results":"28","hashOfConfig":"25"},{"size":8091,"mtime":1620351206629,"results":"29","hashOfConfig":"25"},{"size":1841,"mtime":1620129436035,"results":"30","hashOfConfig":"25"},{"size":16281,"mtime":1620229961764,"results":"31","hashOfConfig":"25"},{"size":128,"mtime":1586701404653,"results":"32","hashOfConfig":"25"},{"size":1749,"mtime":1620349361481,"results":"33","hashOfConfig":"25"},{"size":10412,"mtime":1620227069417,"results":"34","hashOfConfig":"25"},{"size":13857,"mtime":1620217068677,"results":"35","hashOfConfig":"25"},{"size":3008,"mtime":1620240671718,"results":"36","hashOfConfig":"25"},{"size":154,"mtime":1610323315030,"results":"37","hashOfConfig":"25"},{"size":1163,"mtime":1620241096898,"results":"38","hashOfConfig":"25"},{"size":6140,"mtime":1620349353294,"results":"39","hashOfConfig":"25"},{"size":1592,"mtime":1613579922859,"results":"40","hashOfConfig":"25"},{"size":166,"mtime":1611517570117,"results":"41","hashOfConfig":"25"},{"size":277,"mtime":1612483278790,"results":"42","hashOfConfig":"25"},{"size":1153,"mtime":1613581310256,"results":"43","hashOfConfig":"25"},{"size":2917,"mtime":1613581382898,"results":"44","hashOfConfig":"25"},{"size":5161,"mtime":1620350241685,"results":"45","hashOfConfig":"25"},{"size":209,"mtime":1612483278790,"results":"46","hashOfConfig":"25"},{"size":2845,"mtime":1620129436032,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"13roori",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/chrisfraser/projects/react_RPG/react_rpg/src/index.js",[],["98","99"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/reportWebVitals.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/App.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/screens/GameScreen.js",["100"],"import React, { useState, useEffect } from 'react'\n// import ReactDOM from 'react-dom'\n// import Modal from 'react-modal'\n\nimport './GameScreen.css'\nimport GameBoard from '../components/GameBoard.js'\nimport GameActionBar from '../components/GameActionBar.js'\nimport CharacterInfoModal from '../components/CharacterInfoModal.js'\n\nimport MeleePlayer from '../models/MeleePlayer.js'\nimport MagicPlayer from '../models/MagicPlayer.js'\nimport HealerPlayer from '../models/HealerPlayer.js'\nimport MeleeWeapon from '../models/MeleeWeapon.js'\nimport Enemy from '../models/Enemy.js'\nimport Spell from '../models/Spell.js'\nimport Heal from '../models/Heal.js'\n\nconst boardWidth = 5\nconst boardHeight = 5\n\nconst GameScreen = () =>{\n\n    const ken = new MeleePlayer(\"ken\", 35, 100, 11, \"knight\")\n    const matt = new MagicPlayer(\"matt\", 25, 100, 6, \"mage\")\n    const peter = new HealerPlayer(\"peter\", 15, 100, 16, \"priest\")\n    const sword = new MeleeWeapon(\"sword-5\", 5, \"sword\")\n    const club = new MeleeWeapon(\"club-6\", 6, \"club\")\n    const axe = new MeleeWeapon(\"axe-4\", 4, \"axe\")\n    const fireball = new Spell(\"fireball\", 3, \"burn\", 10, 3) // no logic for burn yet\n    const armourBreak = new Spell(\"armour break\", 0, \"armour down\", 100, 3)\n    const attackBreak = new Spell(\"attack break\", 0, \"attack down\", 100, 3) // no logic for attack down yet\n    const freeze = new Spell(\"freeze\", 0, \"frozen\", 70 , 1)\n    const heal = new Heal(\"heal\", 10)\n    const shield = new Heal(\"shield\", 0, \"shield\", 20)\n    peter.heals.push(heal)\n    peter.heals.push(shield)\n    matt.spells.push(fireball)\n    matt.spells.push(armourBreak)\n    matt.spells.push(attackBreak)\n    matt.spells.push(freeze)\n    ken.weapons.push(sword)\n    ken.weapons.push(club)\n    ken.weapons.push(axe)\n    matt.equippedSpell = fireball\n    // peter.equippedHeal = heal\n    // ken.equippedWeapon = sword\n\n    let startingPlayerCharacters = {\n        meleePlayer: ken,\n        magicPlayer: matt,\n        healerPlayer: peter\n    }\n\n    const enemy1 = new Enemy(\"ORCenemy1\", 35, 100, 10, \"enemy1\", \"orc\")\n    const enemy2 = new Enemy(\"ORCenemy2\", 35, 100, 15, \"enemy2\", \"orc\")\n    const enemy3 = new Enemy(\"ORCenemy3\", 35, 100, 20, \"enemy3\", \"orc\")\n\n    let startingEnemyCharacters = {\n        enemy1: enemy1,\n        enemy2: enemy2,\n        enemy3: enemy3\n    }\n\n    const [ playerCharacters, setPlayerCharacters ] = useState(startingPlayerCharacters)\n    const [ enemyCharacters, setEnemyCharacters ] = useState(startingEnemyCharacters)\n\n    const [ enemyMovementPhase, setEnemyMovementPhase ] = useState(false) // dont think this being used any more\n    const [ selectedCharacter, setSelectedCharacter ] = useState(null)\n    const [ usedCharacters, setUsedCharacters ] = useState([])\n    const [ currentPhase, setCurrentPhase ] = useState(\"characterTurnSelect\")\n    const [ modalIsOpen, setModalIsOpen ] = useState(false)\n    const [ modalCharacter, setModalCharacter ] = useState(null)\n    const [ movableSquares, setMovableSquares ] = useState([])\n    const [ attackableSquares, setAttackableSquares ] = useState([])\n\n    useEffect(() =>{\n        if(usedCharacters.length === 3) {\n            setCurrentPhase(\"enemyMovement\")\n            setUsedCharacters([])\n        }\n    }, [usedCharacters])\n\n    useEffect(() =>{\n\n        let timeout = 0\n        let timeout2 = 0\n        let timeout3 = 0\n\n        if (currentPhase === \"enemyMovement\") {\n            setTimeout(() => { \n                timeout = enemy1.takeTurn(playerCharacters, setPlayerCharacters, enemyCharacters, setEnemyCharacters)\n                setTimeout(() => {\n                    timeout2 = enemy2.takeTurn(playerCharacters, setPlayerCharacters, enemyCharacters, setEnemyCharacters)\n                    setTimeout(() => {\n                        timeout3 = enemy3.takeTurn(playerCharacters, setPlayerCharacters, enemyCharacters, setEnemyCharacters)\n                        setTimeout(() => setCurrentPhase(\"characterTurnSelect\"), (timeout3 + 500))\n                    }, (timeout2))\n                }, timeout)\n            }, 800) \n        }\n        console.log(\"playerssssss\", playerCharacters);\n        console.log(\"currentPhase\", currentPhase)\n\n        if ( playerCharacters.meleePlayer.healthPoints <= 0 && playerCharacters.magicPlayer.healthPoints <= 0 && playerCharacters.healerPlayer.healthPoints <= 0 ){\n            alert(\"GAME OVER!!!\")\n            console.log(\"GAME OVER!!!\")\n        } else if ( enemyCharacters.enemy1.healthPoints <= 0 && enemyCharacters.enemy2.healthPoints <= 0 && enemyCharacters.enemy3.healthPoints <= 0 ){\n            alert(\"YOU WIN!!!\")\n            console.log(\"YOU WIN!!!\")\n        }\n    }, [currentPhase])\n\n\n    const calculateMovementLocations = (startingPosition, numberOfStepsAllowed) => {\n\n        const movableLocations = []\n        movableLocations.push(startingPosition)\n\n        for (let i = 1; i <= numberOfStepsAllowed; i++){\n            movableLocations.forEach( movableLocation => {\n                const currentRow = Math.ceil(movableLocation / boardWidth)\n                // if ((movableLocation + boardWidth) < (boardWidth * boardHeight) && !movableLocations.includes(movableLocation + boardWidth)) movableLocations.push(movableLocation + boardWidth)\n                if ((movableLocation + boardWidth) < (boardWidth * boardHeight)) {\n                    if (!movableLocations.includes(movableLocation + boardWidth)) movableLocations.push(movableLocation + boardWidth)\n                } \n                if ((movableLocation - boardWidth) > 0) {\n                    if (!movableLocations.includes(movableLocation - boardWidth)) movableLocations.push(movableLocation - boardWidth)\n                }\n                const nextSquareRow = Math.ceil(((movableLocation + 1) / boardWidth))\n                if (nextSquareRow === currentRow) {\n                    if (!movableLocations.includes(movableLocation + 1)) movableLocations.push(movableLocation + 1)\n                }\n                const previousSquareRow = Math.ceil(((movableLocation - 1) / boardWidth))\n                if (previousSquareRow === currentRow) {\n                    if (!movableLocations.includes(movableLocation - 1)) movableLocations.push(movableLocation - 1)\n                }\n            })\n        }\n        setMovableSquares(movableLocations)\n    }\n\n    const calculateAttackLocations = (characterToAttack, attackRange) => {\n        const currentPosition = playerCharacters[characterToAttack][\"position\"]\n        const currentRow = Math.ceil(currentPosition / boardWidth)\n        const attackableLocations = []\n\n        for (let i = 1 ; i <= attackRange ; i++) {\n            if( currentPosition + (i * 5) < boardWidth * boardHeight ) attackableLocations.push(currentPosition + (i * 5))\n            if( currentPosition - (i * 5) > 0 ) attackableLocations.push(currentPosition - (i * 5))\n            if( Math.ceil((currentPosition + (i * 1)) / boardWidth) === currentRow ) attackableLocations.push(currentPosition + (i * 1))\n            if( Math.ceil((currentPosition - (i * 1)) / boardWidth) === currentRow ) attackableLocations.push(currentPosition - (i * 1))\n        }\n        setAttackableSquares(attackableLocations)\n    }\n\n    const handleImageClick = (character) => {\n        if(!attackableSquares.includes(character.position)){\n            setModalIsOpen(true)\n            setModalCharacter(character)\n        }\n    }\n\n    const displayStatusEffects = (clickedCharacter) => {\n        const display = clickedCharacter.statusEffects.map(statusEffect => {\n            return statusEffect.effect + 'x' + statusEffect.duration\n        })\n        const finished = display.join(\", \")\n        return <p>status: {finished}</p>\n    }\n\n    return (\n        <div>\n            <p>GameScreen</p>\n            <GameBoard \n                selectedCharacter={selectedCharacter}\n                setSelectedCharacter={setSelectedCharacter}\n                currentPhase={currentPhase}\n                setCurrentPhase={setCurrentPhase}\n                movableSquares={movableSquares}\n                attackableSquares={attackableSquares}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                enemyCharacters={enemyCharacters}\n                setEnemyCharacters={setEnemyCharacters}\n                handleImageClick={handleImageClick}\n                usedCharacters={usedCharacters}\n                setUsedCharacters={setUsedCharacters}\n                setAttackableSquares={setAttackableSquares}\n                displayStatusEffects={displayStatusEffects}\n            />\n            <GameActionBar \n                selectedCharacter={selectedCharacter}\n                setSelectedCharacter={setSelectedCharacter} \n                currentPhase={currentPhase} \n                setCurrentPhase={setCurrentPhase}\n                calculateMovementLocations={calculateMovementLocations}\n                calculateAttackLocations={calculateAttackLocations}\n                setMovableSquares={setMovableSquares}\n                setAttackableSquares={setAttackableSquares}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                enemyMovementPhase={enemyMovementPhase}\n                setEnemyMovementPhase={setEnemyMovementPhase}\n                usedCharacters={usedCharacters}\n                setUsedCharacters={setUsedCharacters}\n            />\n            {modalCharacter && \n            <CharacterInfoModal\n                modalIsOpen={modalIsOpen}\n                setModalIsOpen={setModalIsOpen}\n                modalCharacter={modalCharacter}\n                displayStatusEffects={displayStatusEffects}\n            />}\n            {/* {modalCharacter && <Modal\n                className=\"modal-container\"\n                appElement={document.getElementById('root')}\n                isOpen={modalIsOpen}\n                style={{\n                    overlay: {\n                        backgroundColor: 'rgba(0,0,0,0.7)'\n                    }\n                }}\n            >\n                <button className=\"modal-close-button\" onClick={() => setModalIsOpen(false)}>\n\t\t\t\t\tClose\n\t\t\t\t</button>\n                <p>{modalCharacter.name}</p>\n                <p>Attack: {modalCharacter.attackPoints}</p>\n                <p>Health: {modalCharacter.healthPoints}</p>\n                <p>status: {modalCharacter.statusEffects[0] ? modalCharacter.statusEffects[0].effect : \"\"}</p>\n                {displayStatusEffects()}\n            </Modal>} */}\n        </div>\n    )\n}\n\nexport default GameScreen\n","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameActionBar.js",["101","102","103"],"import React, { useEffect, useRef } from 'react';\nimport './GameActionBar.css'\nimport CharacterTurnSelect from './CharacterTurnSelect.js'\nimport MovementPhase from './MovementPhase.js'\nimport AttackPhase from './AttackPhase.js'\n\nimport sword from '../assets/axe.png'\nimport background from '../assets/knight.png'\n\nconst GameActionBar = ( { \n    selectedCharacter,\n    setSelectedCharacter, \n    currentPhase, \n    setCurrentPhase, \n    calculateMovementLocations, \n    calculateAttackLocations,\n    setMovableSquares, \n    setAttackableSquares,\n    playerCharacters, \n    setPlayerCharacters,\n    // enemyMovementPhase,\n    setEnemyMovementPhase,\n    usedCharacters,\n    setUsedCharacters} ) =>{\n\n    // testing\n    const testBox = useRef()\n    const testImage = useRef()\n    const test = () => {\n        const element = document.getElementById(\"testBox\")\n        element.classList.toggle(\"transform\")\n        element.classList.toggle(\"right\")\n        // element.classList.add(\"transform\")\n        \n        testBox.current.classList.toggle(\"transform\")\n        testBox.current.classList.toggle(\"right\")\n        console.log(testBox)\n        // Both of the above do the same thing BUT using REF is the correct react way of doing it\n\n        testImage.current.classList.toggle(\"right\")\n        // testImage.current.classList.toggle(\"transform\")\n        setTimeout(() => testImage.current.classList.toggle(\"right\"), 501)\n    }\n    const up = () => {\n        testImage.current.classList.toggle(\"up\")\n        testImage.current.classList.toggle(\"hidden\")\n        setTimeout(() => {\n            testImage.current.classList.toggle(\"up\")\n            testImage.current.classList.toggle(\"hidden\")\n        }, 501)\n    }\n    const down = () => {\n        testImage.current.classList.toggle(\"down\")\n        testImage.current.classList.toggle(\"hidden\")\n        setTimeout(() => {\n            testImage.current.classList.toggle(\"down\")\n            testImage.current.classList.toggle(\"hidden\")\n        }, 501)\n    }\n    const left = () => {\n        testImage.current.classList.toggle(\"left\")\n        testImage.current.classList.toggle(\"hidden\")\n        setTimeout(() => {\n            testImage.current.classList.toggle(\"left\")\n            testImage.current.classList.toggle(\"hidden\")\n        }, 501)\n    }\n    const right = () => {\n        testImage.current.classList.toggle(\"right\")\n        testImage.current.classList.toggle(\"hidden\")\n        setTimeout(() => {\n            testImage.current.classList.toggle(\"right\")\n            testImage.current.classList.toggle(\"hidden\")\n        }, 501)\n    }\n    // end of testing\n\n\n    const startingPosition = useRef(null)\n    // this didnt need to be useRef, also work with state\n    // const [ startingPosition, setStartingPosition ] = useState(null)\n\n    useEffect(() =>{\n        if(selectedCharacter) startingPosition.current = playerCharacters[selectedCharacter][\"position\"]\n    }, [selectedCharacter])\n\n    return (\n        <div>\n            <p>GameActionBar</p>\n            {currentPhase === \"characterTurnSelect\" && <CharacterTurnSelect\n                playerCharacters={playerCharacters} \n                setSelectedCharacter={setSelectedCharacter}\n                usedCharacters={usedCharacters}\n                setUsedCharacters={setUsedCharacters}\n                setCurrentPhase={setCurrentPhase}\n                calculateMovementLocations={calculateMovementLocations}\n            />}\n            {currentPhase === \"playerMovement\" && <MovementPhase \n                selectedCharacter={selectedCharacter}\n                setSelectedCharacter={setSelectedCharacter}\n                setCurrentPhase={setCurrentPhase}\n                calculateMovementLocations={calculateMovementLocations}\n                setMovableSquares={setMovableSquares}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                setEnemyMovementPhase={setEnemyMovementPhase}\n                calculateAttackLocations={calculateAttackLocations}\n                startingPosition={startingPosition}\n            />}\n            {currentPhase === \"enemyMovement\" && \n                <div>\n                    <h1>Enemy Movement Phase</h1>\n                    <p>Please Wait...</p>\n                </div>\n            }\n            {currentPhase === \"playerAttack\" && <AttackPhase \n                selectedCharacter={selectedCharacter}\n                setSelectedCharacter={setSelectedCharacter}\n                setCurrentPhase={setCurrentPhase}\n                calculateAttackLocations={calculateAttackLocations}\n                calculateMovementLocations={calculateMovementLocations}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                setAttackableSquares={setAttackableSquares}\n                startingPosition={startingPosition}\n                usedCharacters={usedCharacters}\n                setUsedCharacters={setUsedCharacters}\n            />}\n            <div className=\"info-box main-info-box\">\n                <h2>Basic Info</h2>\n                <p>Click a character at any time to get its current status</p>\n                <p>All player's characters act first and then all enemy characters will take their turn</p>\n                <p>Select a character to control ={'>'} Move them ={'>'} change equipment/spells if necessary ={'>'} then attack if in range of an enemy</p>\n                <p>Repeat until all characters have completed their turn</p>\n                <p>Win by killing all enemies before they kill you!</p>\n\n                <h3>Movement</h3>\n                <p>All player characters can move 2 squares non-diagonally</p> \n                <p>All enemy characters can move 3 squares non-diagonally</p> \n                <p>All characters can move through other characters but cannot finish on the same square as another character</p> \n                \n                <h3>Attack</h3>\n                <p>All player characters can attack a single target within 2 squares either straight up, down, left or right</p>\n                <p>All enemy characters can attack a single target in an adjacent square either straight up, down, left or right</p>\n            </div>\n            {/* testing!!!!!!!!!!!!!!!!!!!!!!!!!!  */}\n            <br/><br/><br/><br/><br/><br/><br/><br/><br/>\n            <p>IGNORE THIS..... IT'S JUST TESTING</p>\n            {/* <div id=\"testBox\" className=\"box transform right\" onClick={() => test()}></div>\n            <div className=\"box\" ref={testBox} onClick={() => test()}></div> */}\n            {/* <div className=\"box transform\" ref={testBox} onClick={() => test()}></div> */}\n            {/* <input type=\"button\" id=\"button\" value=\"Click Me\" onClick={() => test()}></input> */}\n\n\n            <input type=\"button\" id=\"button\" value=\"UP\" onClick={() => up()}></input>\n            <input type=\"button\" id=\"button\" value=\"DOWN\" onClick={() => down()}></input>\n            <input type=\"button\" id=\"button\" value=\"LEFT\" onClick={() => left()}></input>\n            <input type=\"button\" id=\"button\" value=\"RIGHT\" onClick={() => right()}></input>\n            {/* <div className=\"container-container\" style={{ backgroundImage: `url(${background})`, backgroundSize: \"cover\" }}> */}\n            <div className=\"container-container\">\n                {/* <div className=\"test-background-image-container\">\n                    <img src={background} alt={\"image\"}  className=\"test-background-image\" onClick={() => test()}></img> \n                </div>\n                <div ref={testImage} className=\"test-image-container hidden\">\n                    <img src={sword} alt={\"image\"}  className=\"test-image\" onClick={() => test()}></img> \n                </div> */}\n                <img src={background} alt={\"image\"}  className=\"test-background-image\" onClick={() => test()}></img> \n                <img src={sword} ref={testImage} alt={\"image\"}  className=\"test-image hidden\" onClick={() => test()}></img> \n            </div>\n            {/* end of testing  */}\n\n        </div>\n    )\n}\n\n\nexport default GameActionBar","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameBoard.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameSquare.js",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/boardImages.js",[],["120","121"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/MovementPhase.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Character.js",["122"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Enemy.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleePlayer.js",["123"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/meleeWeapon.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleeWeapon.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/AttackPhase.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/CharacterTurnSelect.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/WeaponImages.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Spell.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/HealerPlayer.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MagicPlayer.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/EquipModal.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Heal.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/CharacterInfoModal.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":111,"column":8,"nodeType":"130","endLine":111,"endColumn":22,"suggestions":"131"},{"ruleId":"128","severity":1,"message":"132","line":85,"column":8,"nodeType":"130","endLine":85,"endColumn":27,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":167,"column":17,"nodeType":"136","endLine":167,"endColumn":111},{"ruleId":"134","severity":1,"message":"135","line":168,"column":17,"nodeType":"136","endLine":168,"endColumn":118},{"ruleId":"137","severity":1,"message":"138","line":11,"column":8,"nodeType":"139","messageId":"140","endLine":11,"endColumn":13},{"ruleId":"137","severity":1,"message":"141","line":77,"column":7,"nodeType":"139","messageId":"140","endLine":77,"endColumn":9},{"ruleId":"137","severity":1,"message":"142","line":85,"column":7,"nodeType":"139","messageId":"140","endLine":85,"endColumn":11},{"ruleId":"137","severity":1,"message":"143","line":93,"column":7,"nodeType":"139","messageId":"140","endLine":93,"endColumn":11},{"ruleId":"137","severity":1,"message":"144","line":101,"column":7,"nodeType":"139","messageId":"140","endLine":101,"endColumn":12},{"ruleId":"128","severity":1,"message":"145","line":137,"column":8,"nodeType":"130","endLine":137,"endColumn":43,"suggestions":"146"},{"ruleId":"128","severity":1,"message":"147","line":186,"column":8,"nodeType":"130","endLine":186,"endColumn":75,"suggestions":"148"},{"ruleId":"137","severity":1,"message":"149","line":220,"column":11,"nodeType":"139","messageId":"140","endLine":220,"endColumn":23},{"ruleId":"134","severity":1,"message":"135","line":228,"column":17,"nodeType":"136","endLine":228,"endColumn":123},{"ruleId":"137","severity":1,"message":"150","line":236,"column":11,"nodeType":"139","messageId":"140","endLine":236,"endColumn":45},{"ruleId":"134","severity":1,"message":"135","line":267,"column":16,"nodeType":"136","endLine":267,"endColumn":215},{"ruleId":"137","severity":1,"message":"151","line":270,"column":11,"nodeType":"139","messageId":"140","endLine":270,"endColumn":48},{"ruleId":"134","severity":1,"message":"135","line":293,"column":20,"nodeType":"136","endLine":293,"endColumn":116},{"ruleId":"152","severity":1,"message":"153","line":306,"column":131,"nodeType":"154","messageId":"155","endLine":306,"endColumn":132},{"ruleId":"152","severity":1,"message":"153","line":306,"column":142,"nodeType":"154","messageId":"155","endLine":306,"endColumn":143},{"ruleId":"134","severity":1,"message":"135","line":331,"column":17,"nodeType":"136","endLine":331,"endColumn":188},{"ruleId":"124","replacedBy":"156"},{"ruleId":"126","replacedBy":"157"},{"ruleId":"137","severity":1,"message":"158","line":15,"column":11,"nodeType":"139","messageId":"140","endLine":15,"endColumn":24},{"ruleId":"137","severity":1,"message":"159","line":24,"column":11,"nodeType":"139","messageId":"140","endLine":24,"endColumn":25},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'enemy1', 'enemy2', 'enemy3', 'enemyCharacters', and 'playerCharacters'. Either include them or remove the dependency array.","ArrayExpression",["162"],"React Hook useEffect has a missing dependency: 'playerCharacters'. Either include it or remove the dependency array.",["163"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-unused-vars","'sword' is defined but never used.","Identifier","unusedVar","'up' is assigned a value but never used.","'down' is assigned a value but never used.","'left' is assigned a value but never used.","'right' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'squareNumber'. Either include it or remove the dependency array.",["164"],"React Hook useEffect has missing dependencies: 'enemyCharacters', 'image', 'selectedCharacter', and 'squareNumber'. Either include them or remove the dependency array.",["165"],"'displayImage' is assigned a value but never used.","'displayAttackAnimationWithEquipped' is assigned a value but never used.","'displayAttackAnimationNothingEquipped' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["160"],["161"],"'targetElement' is assigned a value but never used.","'startingHealth' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},"Update the dependencies array to be: [currentPhase, enemy1, enemy2, enemy3, enemyCharacters, playerCharacters]",{"range":"174","text":"175"},"Update the dependencies array to be: [playerCharacters, selectedCharacter]",{"range":"176","text":"177"},"Update the dependencies array to be: [playerCharacters, enemyCharacters, squareNumber]",{"range":"178","text":"179"},"Update the dependencies array to be: [movableSquares, attackableSquares, playerCharacters, currentPhase, selectedCharacter, image, squareNumber, enemyCharacters]",{"range":"180","text":"181"},[4652,4666],"[currentPhase, enemy1, enemy2, enemy3, enemyCharacters, playerCharacters]",[2910,2929],"[playerCharacters, selectedCharacter]",[4154,4189],"[playerCharacters, enemyCharacters, squareNumber]",[6617,6684],"[movableSquares, attackableSquares, playerCharacters, currentPhase, selectedCharacter, image, squareNumber, enemyCharacters]"]