[{"/Users/chrisfraser/projects/react_RPG/react_rpg/src/index.js":"1","/Users/chrisfraser/projects/react_RPG/react_rpg/src/reportWebVitals.js":"2","/Users/chrisfraser/projects/react_RPG/react_rpg/src/App.js":"3","/Users/chrisfraser/projects/react_RPG/react_rpg/src/screens/GameScreen.js":"4","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameActionBar.js":"5","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameBoard.js":"6","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameSquare.js":"7","/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/boardImages.js":"8","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/MovementPhase.js":"9","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Character.js":"10","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Enemy.js":"11","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleePlayer.js":"12","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/meleeWeapon.js":"13","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleeWeapon.js":"14","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/AttackPhase.js":"15"},{"size":500,"mtime":1608752934000,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1608752934002,"results":"18","hashOfConfig":"17"},{"size":230,"mtime":1608770853174,"results":"19","hashOfConfig":"17"},{"size":11679,"mtime":1611270243569,"results":"20","hashOfConfig":"17"},{"size":2534,"mtime":1611192963189,"results":"21","hashOfConfig":"17"},{"size":3520,"mtime":1611185117232,"results":"22","hashOfConfig":"17"},{"size":11563,"mtime":1611255718753,"results":"23","hashOfConfig":"17"},{"size":128,"mtime":1586701404653,"results":"24","hashOfConfig":"17"},{"size":3372,"mtime":1611189916744,"results":"25","hashOfConfig":"17"},{"size":523,"mtime":1610655055397,"results":"26","hashOfConfig":"17"},{"size":12697,"mtime":1611271326966,"results":"27","hashOfConfig":"17"},{"size":1406,"mtime":1610655153713,"results":"28","hashOfConfig":"17"},{"size":154,"mtime":1610323315030,"results":"29","hashOfConfig":"17"},{"size":154,"mtime":1610323315030,"results":"30","hashOfConfig":"17"},{"size":2317,"mtime":1611024689525,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"13roori",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chrisfraser/projects/react_RPG/react_rpg/src/index.js",[],["66","67"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/reportWebVitals.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/App.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/screens/GameScreen.js",["68","69","70","71","72"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport Modal from 'react-modal'\n\nimport './GameScreen.css'\nimport GameBoard from '../components/GameBoard'\nimport GameActionBar from '../components/GameActionBar'\n\nimport Character from '../models/Character.js'\nimport MeleePlayer from '../models/MeleePlayer.js'\nimport MeleeWeapon from '../models/MeleeWeapon.js'\nimport Enemy from '../models/Enemy.js'\n\nconst boardWidth = 5\nconst boardHeight = 5\n\nconst GameScreen = () =>{\n\n\n    const [ enemyMovementPhase, setEnemyMovementPhase ] = useState(false)\n    const [ selectedCharacter, setSelectedCharacter ] = useState(null)\n    const [ currentPhase, setCurrentPhase ] = useState(\"playerMovement\")\n    const [ modalIsOpen, setModalIsOpen ] = useState(false)\n    const [ modalCharacter, setModalCharacter ] = useState(null)\n\n    useEffect(() =>{\n        const bob = new Character(\"bob\", 10, 20)\n        // const orc = new Enemy(\"orc\", 1, 100, 15)\n        const karen = new MeleePlayer(\"karen\", 10, 20, 11, \"Knight\")\n        const club = new MeleeWeapon(\"club-5\", 5, \"sword\")\n\n        // THIS IS FOR MOVING ENEMY!\n        let timeout = 0\n        let timeout2 = 0\n        let timeout3 = 0\n\n        if (currentPhase === \"enemyMovement\") {\n            timeout = enemy1.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n            setTimeout(() => {\n                timeout2 = enemy2.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n                setTimeout(() => {\n                    timeout3 = enemy3.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n                    setTimeout(() => setCurrentPhase(\"playerAttack\"), (timeout3 + 500))\n                }, (timeout2))\n            }, timeout)\n        }\n\n        // if (currentPhase === \"enemyMovement\") {\n        //     console.log(\"RUNNING22222222\")\n        //     timeout = enemy1.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        //     console.log(\"1\", timeout)\n\n        //     setTimeout(() => {\n        //         timeout2 = enemy2.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        //         console.log(\"2\", timeout2)\n        //     }, timeout)\n        //     setTimeout(() => {\n        //         timeout3 = enemy3.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        //         console.log(\"3\", timeout3)\n\n        //     }, (timeout + timeout2))\n        //     setTimeout(() => setCurrentPhase(\"playerMovement\"), (timeout + timeout2 + timeout3))\n        // }\n\n        // const movedEnemy = enemy1.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        // const movedEnemy2 = enemy2.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        // const movedEnemy3 = enemy3.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        // const tempEnemyCharacters = JSON.parse(JSON.stringify(enemyCharacters))\n        // setTimeout(() => setEnemyCharacters(tempEnemyCharacters), 2000)\n\n        // let tempEnemyCharacters = null\n        // setTimeout(() => {\n        //     const movedEnemy = enemy1.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        //     tempEnemyCharacters = JSON.parse(JSON.stringify(enemyCharacters))\n        //     setEnemyCharacters(tempEnemyCharacters)\n        // }, 1000)\n\n        // setTimeout(() => {\n        //     const movedEnemy = enemy2.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        //     tempEnemyCharacters = JSON.parse(JSON.stringify(enemyCharacters))\n        //     setEnemyCharacters(tempEnemyCharacters)\n        // }, 2000)\n\n        // setTimeout(() => {\n        //     const movedEnemy = enemy3.move(playerCharacters, enemyCharacters, setEnemyCharacters)\n        //     tempEnemyCharacters = JSON.parse(JSON.stringify(enemyCharacters))\n        //     setEnemyCharacters(tempEnemyCharacters)\n        // }, 3000)\n        \n\n\n        // tempEnemyCharacters = JSON.parse(JSON.stringify(enemyCharacters))\n        // tempEnemyCharacters[enemy1.name] = movedEnemy\n        // tempEnemyCharacters[enemy2.name] = movedEnemy2\n        // tempEnemyCharacters[enemy3.name] = movedEnemy3\n        // setTimeout(() => setEnemyCharacters(tempEnemyCharacters), 6000)\n\n        // const movingEnemy = \n        // console.log(\"newPosition\", newPosition)\n        // console.log(enemyCharacters)\n\n\n        // karen.equipedWeapon = club\n        // karen.attack(enemy1)\n        // console.log(\"enemy1\", enemy1)\n        // console.log(\"karen\", karen)\n\n\n    }, [currentPhase])\n\n    // const [ magicPosition, setMagicPosition ] = useState(16)\n    // const [ meleePosition, setMeleePosition ] = useState(11)\n    // const [ healerPosition, setHealerPosition ] = useState(6)\n\n    // THIS WORKED!!!!!!\n    // let startingPlayerCharacters = {\n    //     meleePlayer: {\n    //         position: 11,\n    //         type: \"Knight\",\n    //         name: \"Jeff\"\n    //     },\n    //     magicPlayer: {\n    //         position: 16,\n    //         type: \"Mage\",\n    //         name: \"Dave\"\n    //     },\n    //     healerPlayer: {\n    //         position: 6,\n    //         type: \"Priest\",\n    //         name: \"Bob\"\n    //     }\n    // }\n\n    // TRYING THIS!!!!!!!!\n    const ken = new MeleePlayer(\"ken\", 30, 100, 11, \"Knight\")\n    const matt = new MeleePlayer(\"matt\", 20, 100, 6, \"mage\")\n    const peter = new MeleePlayer(\"peter\", 10, 100, 16, \"priest\")\n    const sword = new MeleeWeapon(\"club-5\", 5, \"axe\")\n    ken.equipedWeapon = sword\n\n    let startingPlayerCharacters = {\n        meleePlayer: ken,\n        magicPlayer: matt,\n        healerPlayer: peter\n    }\n    console.log(startingPlayerCharacters)\n\n    const enemy1 = new Enemy(\"enemy1\", 1, 100, 10)\n    const enemy2 = new Enemy(\"enemy2\", 1, 100, 15)\n    const enemy3 = new Enemy(\"enemy3\", 1, 100, 20)\n\n    let startingEnemyCharacters = {\n        enemy1: enemy1,\n        enemy2: enemy2,\n        enemy3: enemy3\n    }\n\n    const [ playerCharacters, setPlayerCharacters ] = useState(startingPlayerCharacters)\n    const [ enemyCharacters, setEnemyCharacters ] = useState(startingEnemyCharacters)\n\n\n    \n\n\n    const [ movableSquares, setMovableSquares ] = useState([])\n    const [ attackableSquares, setAttackableSquares ] = useState([])\n\n    const calculateMovementLocations = (characterToMove, numberOfStepsAllowed) => {\n\n        const movableLocations = []\n        // switch(characterToMove){\n        //     case \"meleePlayer\":\n        //         movableLocations.push(meleePosition)\n        //         break\n        //     case \"magicPlayer\":\n        //         movableLocations.push(magicPosition)\n        //         break\n        //     case \"healerPlayer\":\n        //         movableLocations.push(healerPosition)\n        //         break\n        // }\n        movableLocations.push(playerCharacters[characterToMove][\"position\"])\n\n        for (let i = 1; i <= numberOfStepsAllowed; i++){\n            movableLocations.forEach( movableLocation => {\n                const currentRow = Math.ceil(movableLocation / boardWidth)\n                // if ((movableLocation + boardWidth) < (boardWidth * boardHeight) && !movableLocations.includes(movableLocation + boardWidth)) movableLocations.push(movableLocation + boardWidth)\n                if ((movableLocation + boardWidth) < (boardWidth * boardHeight)) {\n                    if (!movableLocations.includes(movableLocation + boardWidth)) movableLocations.push(movableLocation + boardWidth)\n                } \n                if ((movableLocation - boardWidth) > 0) {\n                    if (!movableLocations.includes(movableLocation - boardWidth)) movableLocations.push(movableLocation - boardWidth)\n                }\n                const nextSquareRow = Math.ceil(((movableLocation + 1) / boardWidth))\n                if (nextSquareRow === currentRow) {\n                    if (!movableLocations.includes(movableLocation + 1)) movableLocations.push(movableLocation + 1)\n                }\n                const previousSquareRow = Math.ceil(((movableLocation - 1) / boardWidth))\n                if (previousSquareRow === currentRow) {\n                    if (!movableLocations.includes(movableLocation - 1)) movableLocations.push(movableLocation - 1)\n                }\n            })\n        }\n        console.log(movableLocations)\n        setMovableSquares(movableLocations)\n    }\n\n    const calculateAttackLocations = (characterToAttack, attackRange) => {\n        const currentPosition = playerCharacters[characterToAttack][\"position\"]\n        const currentRow = Math.ceil(currentPosition / boardWidth)\n        const attackableLocations = []\n\n        for (let i = 1 ; i <= attackRange ; i++) {\n            if( currentPosition + (i * 5) < boardWidth * boardHeight ) attackableLocations.push(currentPosition + (i * 5))\n            if( currentPosition - (i * 5) > 0 ) attackableLocations.push(currentPosition - (i * 5))\n            if( Math.ceil((currentPosition + (i * 1)) / boardWidth) === currentRow ) attackableLocations.push(currentPosition + (i * 1))\n            if( Math.ceil((currentPosition - (i * 1)) / boardWidth) === currentRow ) attackableLocations.push(currentPosition - (i * 1))\n        }\n        console.log(\"attackableLocations\", attackableLocations)\n        setAttackableSquares(attackableLocations)\n    }\n\n    const handleImageClick = (character) => {\n        setModalIsOpen(true)\n        setModalCharacter(character)\n    }\n\n    return (\n        <div>\n            <p>GameScreen</p>\n            <GameBoard \n                selectedCharacter={selectedCharacter} \n                currentPhase={currentPhase}\n                // magicPosition={magicPosition}\n                // healerPosition={healerPosition}\n                // meleePosition={meleePosition}\n                // setMagicPosition={setMagicPosition}\n                // setHealerPosition={setHealerPosition}\n                // setMeleePosition={setMeleePosition}\n                movableSquares={movableSquares}\n                attackableSquares={attackableSquares}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                enemyCharacters={enemyCharacters}\n                handleImageClick={handleImageClick}\n            />\n            <GameActionBar \n                setSelectedCharacter={setSelectedCharacter} \n                currentPhase={currentPhase} \n                setCurrentPhase={setCurrentPhase}\n                calculateMovementLocations={calculateMovementLocations}\n                calculateAttackLocations={calculateAttackLocations}\n                setMovableSquares={setMovableSquares}\n                setAttackableSquares={setAttackableSquares}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                enemyMovementPhase={enemyMovementPhase}\n                setEnemyMovementPhase={setEnemyMovementPhase}\n            />\n            {modalCharacter && <Modal\n                className=\"modal-container\"\n                appElement={document.getElementById('root')}\n                isOpen={modalIsOpen}\n                style={{\n                    overlay: {\n                        backgroundColor: 'rgba(0,0,0,0.7)'\n                    }\n                }}\n            >\n                <button className=\"modal-close-button\" onClick={() => setModalIsOpen(false)}>\n\t\t\t\t\tClose\n\t\t\t\t</button>\n                <p>{modalCharacter.name}</p>\n                <p>Attack: {modalCharacter.attackPoints}</p>\n                <p>Health: {modalCharacter.healthPoints}</p>\n                <p>status: {modalCharacter.statusEffects[0]}</p>\n\n            </Modal>}\n           \n        </div>\n    )\n\n}\n\nexport default GameScreen\n","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameActionBar.js",["73"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameBoard.js",["74"],"import React, { useState } from 'react';\nimport './GameBoard.css'\n// import { StyleSheet, Text, View, FlatList, Modal } from 'react-native';\n\nimport GameSquare from './GameSquare.js'\n\nconst GameBoard = ({ \n    // meleePosition, \n    // magicPosition, \n    // healerPosition, \n    // setMeleePosition, \n    // setMagicPosition, \n    // setHealerPosition, \n    selectedCharacter, \n    currentPhase, \n    movableSquares,\n    attackableSquares,\n    playerCharacters,\n    setPlayerCharacters,\n    enemyCharacters,\n    handleImageClick }) => {\n\n\n    const fillGameBoard = () => {\n\n        // const playerPositions = [magicPosition, meleePosition, healerPosition]\n        // console.log(playerPositions);\n        \n        const gameSquares = []\n        for ( let i = 1; i < 26; i++ ) {\n            gameSquares.push(<GameSquare \n                key={i} \n                // playerPositions={playerPositions} \n                squareNumber={i} \n                selectedCharacter={selectedCharacter}\n                movableSquares={movableSquares}\n                attackableSquares={attackableSquares}\n                // meleePosition={meleePosition}\n                // magicPosition={magicPosition}\n                // healerPosition={healerPosition}\n                // setMeleePosition={setMeleePosition}\n                // setMagicPosition={setMagicPosition}\n                // setHealerPosition={setHealerPosition}\n                playerCharacters={playerCharacters}\n                setPlayerCharacters={setPlayerCharacters}\n                enemyCharacters={enemyCharacters}\n                handleImageClick={handleImageClick}\n            />)\n        }   \n        return gameSquares  \n    }\n\n    \n\n    return (\n        <div>\n        {/* <div style={styles.container}> */}\n\n            <p>GameBoard</p>\n            {/* <div style={styles.boardContainer}> */}\n            <div className=\"board-container\">\n                {fillGameBoard()}\n            </div>\n            {/* <Modal\n                // style={{height: 50, width: 50}}\n                // animationType=\"slide\"\n                transparent={true}\n                visible={false}\n                // onRequestClose={() => {\n                // Alert.alert(\"Modal has been closed.\");\n                // }}\n            >  \n                <View style={{\n                    flex: 1,\n                    flexDirection: 'column',\n                    backgroundColor: '#00000080',\n                    justifyContent: 'center',\n                    alignItems: 'center'}}>\n                    <View style={{\n                        width: 300,\n                        height: 500,\n                        backgroundColor: '#fff', \n                        padding: 20}}>\n                            \n                        <Text>Hi</Text>\n                    \n                    </View>\n                </View> */}\n                {/* <View style={{height: 70, width:50}}>\n                    <Text>Hi</Text>\n                </View> */}\n            {/* </Modal> */}\n\n        </div>\n    )\n\n}\n\n// const styles = StyleSheet.create({\n//     container: {\n//         // flex: 1,\n        \n\n//         // backgroundColor: '#fff',\n//         // alignItems: 'center',\n//         // justifyContent: 'center',\n//     },\n//     boardContainer: {\n//         flexDirection: 'row',\n//         flexWrap: 'wrap',\n//         maxWidth: 425,\n//         // backgroundColor: '#fff',\n//         // alignItems: 'center',\n//         // justifyContent: 'center',\n//     },\n// });\n\nexport default GameBoard","/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/GameSquare.js",["75","76","77","78","79","80","81"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/assets/boardImages.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/MovementPhase.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Character.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/Enemy.js",["82","83","84"],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleePlayer.js",["85"],"import Character from './Character.js'\n\nfunction MeleePlayer(name, attackPoints, healthPoints, position, type) {\n    Character.call(this, name, attackPoints, healthPoints, position)\n    this.type = type\n    this.equipedWeapon  = null\n    this.weapons = []\n    this.ultimateCharge = 0\n\n    // this.statusEffects = []\n}\n\nMeleePlayer.prototype = Object.create(Character.prototype);\nObject.defineProperty(MeleePlayer.prototype, 'constructor', { \n    value: MeleePlayer, \n    enumerable: false, // so that it does not appear in 'for in' loop\n    writable: true \n});\n\nMeleePlayer.prototype.attack = function (enemy){\n    let damageDone = this.attackPoints\n    const startingHealth = enemy.healthPoints;\n\n    if(this.equipedWeapon) {\n        damageDone += this.equipedWeapon.attackPower\n        const randomNumber = Math.floor(Math.random() * 100) + 1\n        switch(this.equipedWeapon.type){\n            case(\"sword\"):\n                if(randomNumber <= 25) damageDone *= 2\n                break\n            case(\"axe\"):\n                if(randomNumber <= 10) damageDone = startingHealth\n                else if(randomNumber <= 20) enemy.statusEffects.push(\"attack down\")\n                break\n            case(\"club\"):\n                if(randomNumber <= 25) enemy.statusEffects.push(\"stun\")\n                break\n        }\n    }\n    enemy.healthPoints = startingHealth - damageDone\n}\n\nexport default MeleePlayer","/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/meleeWeapon.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/models/MeleeWeapon.js",[],"/Users/chrisfraser/projects/react_RPG/react_rpg/src/components/AttackPhase.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":16},{"ruleId":"90","severity":1,"message":"94","line":27,"column":15,"nodeType":"92","messageId":"93","endLine":27,"endColumn":18},{"ruleId":"90","severity":1,"message":"95","line":29,"column":15,"nodeType":"92","messageId":"93","endLine":29,"endColumn":20},{"ruleId":"90","severity":1,"message":"96","line":30,"column":15,"nodeType":"92","messageId":"93","endLine":30,"endColumn":19},{"ruleId":"97","severity":1,"message":"98","line":109,"column":8,"nodeType":"99","endLine":109,"endColumn":22,"suggestions":"100"},{"ruleId":"90","severity":1,"message":"101","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"101","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"102","line":1,"column":38,"nodeType":"92","messageId":"93","endLine":1,"endColumn":44},{"ruleId":"90","severity":1,"message":"103","line":15,"column":8,"nodeType":"92","messageId":"93","endLine":15,"endColumn":19},{"ruleId":"97","severity":1,"message":"104","line":123,"column":8,"nodeType":"99","endLine":123,"endColumn":43,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":134,"column":9,"nodeType":"108","messageId":"109","endLine":144,"endColumn":10},{"ruleId":"97","severity":1,"message":"110","line":152,"column":8,"nodeType":"99","endLine":152,"endColumn":43,"suggestions":"111"},{"ruleId":"90","severity":1,"message":"112","line":154,"column":13,"nodeType":"92","messageId":"93","endLine":154,"endColumn":20},{"ruleId":"90","severity":1,"message":"113","line":154,"column":22,"nodeType":"92","messageId":"93","endLine":154,"endColumn":32},{"ruleId":"90","severity":1,"message":"114","line":72,"column":13,"nodeType":"92","messageId":"93","endLine":72,"endColumn":32},{"ruleId":"90","severity":1,"message":"115","line":191,"column":15,"nodeType":"92","messageId":"93","endLine":191,"endColumn":36},{"ruleId":"90","severity":1,"message":"116","line":241,"column":13,"nodeType":"92","messageId":"93","endLine":241,"endColumn":45},{"ruleId":"106","severity":1,"message":"107","line":27,"column":9,"nodeType":"108","messageId":"109","endLine":38,"endColumn":10},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'bob' is assigned a value but never used.","'karen' is assigned a value but never used.","'club' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'enemy1', 'enemy2', 'enemy3', 'enemyCharacters', and 'playerCharacters'. Either include them or remove the dependency array.","ArrayExpression",["119"],"'useState' is defined but never used.","'useRef' is defined but never used.","'boardImages' is defined but never used.","React Hook useEffect has missing dependencies: 'character' and 'squareNumber'. Either include them or remove the dependency array.",["120"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'image', 'selectedCharacter', and 'squareNumber'. Either include them or remove the dependency array.",["121"],"'refresh' is assigned a value but never used.","'setRefresh' is assigned a value but never used.","'tempEnemyCharacters' is assigned a value but never used.","'numberOfMovesRequired' is assigned a value but never used.","'indexOfClosestAttackablePosition' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},"Update the dependencies array to be: [currentPhase, enemy1, enemy2, enemy3, enemyCharacters, playerCharacters]",{"range":"128","text":"129"},"Update the dependencies array to be: [playerCharacters, enemyCharacters, squareNumber, character]",{"range":"130","text":"131"},"Update the dependencies array to be: [movableSquares, attackableSquares, selectedCharacter, image, squareNumber]",{"range":"132","text":"133"},[4510,4524],"[currentPhase, enemy1, enemy2, enemy3, enemyCharacters, playerCharacters]",[3986,4021],"[playerCharacters, enemyCharacters, squareNumber, character]",[4923,4958],"[movableSquares, attackableSquares, selectedCharacter, image, squareNumber]"]